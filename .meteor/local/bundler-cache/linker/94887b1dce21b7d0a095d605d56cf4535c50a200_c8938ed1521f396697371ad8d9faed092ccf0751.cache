[{"type":"js","data":"Package[\"core-runtime\"].queue(\"ddp-server\",function () {/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar EmitterPromise = Package.meteor.EmitterPromise;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar Random = Package.random.Random;\nvar EJSON = Package.ejson.EJSON;\nvar Retry = Package.retry.Retry;\nvar MongoID = Package['mongo-id'].MongoID;\nvar DiffSequence = Package['diff-sequence'].DiffSequence;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar DDPCommon = Package['ddp-common'].DDPCommon;\nvar DDP = Package['ddp-client'].DDP;\nvar WebApp = Package.webapp.WebApp;\nvar WebAppInternals = Package.webapp.WebAppInternals;\nvar main = Package.webapp.main;\nvar RoutePolicy = Package.routepolicy.RoutePolicy;\nvar Hook = Package['callback-hook'].Hook;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar StreamServer, DDPServer, id, Server;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"ddp-server\":{\"stream_server.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ddp-server/stream_server.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let once;\n    module.link(\"lodash.once\", {\n      default(v) {\n        once = v;\n      }\n    }, 0);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    // By default, we use the permessage-deflate extension with default\n    // configuration. If $SERVER_WEBSOCKET_COMPRESSION is set, then it must be valid\n    // JSON. If it represents a falsey value, then we do not use permessage-deflate\n    // at all; otherwise, the JSON value is used as an argument to deflate's\n    // configure method; see\n    // https://github.com/faye/permessage-deflate-node/blob/master/README.md\n    //\n    // (We do this in an _.once instead of at startup, because we don't want to\n    // crash the tool during isopacket load if your JSON doesn't parse. This is only\n    // a problem because the tool has to load the DDP server code just in order to\n    // be a DDP client; see https://github.com/meteor/meteor/issues/3452 .)\n    var websocketExtensions = once(function () {\n      var extensions = [];\n      var websocketCompressionConfig = process.env.SERVER_WEBSOCKET_COMPRESSION ? JSON.parse(process.env.SERVER_WEBSOCKET_COMPRESSION) : {};\n      if (websocketCompressionConfig) {\n        extensions.push(Npm.require('permessage-deflate').configure(websocketCompressionConfig));\n      }\n      return extensions;\n    });\n    var pathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || \"\";\n    StreamServer = function () {\n      var self = this;\n      self.registration_callbacks = [];\n      self.open_sockets = [];\n\n      // Because we are installing directly onto WebApp.httpServer instead of using\n      // WebApp.app, we have to process the path prefix ourselves.\n      self.prefix = pathPrefix + '/sockjs';\n      RoutePolicy.declare(self.prefix + '/', 'network');\n\n      // set up sockjs\n      var sockjs = Npm.require('sockjs');\n      var serverOptions = {\n        prefix: self.prefix,\n        log: function () {},\n        // this is the default, but we code it explicitly because we depend\n        // on it in stream_client:HEARTBEAT_TIMEOUT\n        heartbeat_delay: 45000,\n        // The default disconnect_delay is 5 seconds, but if the server ends up CPU\n        // bound for that much time, SockJS might not notice that the user has\n        // reconnected because the timer (of disconnect_delay ms) can fire before\n        // SockJS processes the new connection. Eventually we'll fix this by not\n        // combining CPU-heavy processing with SockJS termination (eg a proxy which\n        // converts to Unix sockets) but for now, raise the delay.\n        disconnect_delay: 60 * 1000,\n        // Allow disabling of CORS requests to address\n        // https://github.com/meteor/meteor/issues/8317.\n        disable_cors: !!process.env.DISABLE_SOCKJS_CORS,\n        // Set the USE_JSESSIONID environment variable to enable setting the\n        // JSESSIONID cookie. This is useful for setting up proxies with\n        // session affinity.\n        jsessionid: !!process.env.USE_JSESSIONID\n      };\n\n      // If you know your server environment (eg, proxies) will prevent websockets\n      // from ever working, set $DISABLE_WEBSOCKETS and SockJS clients (ie,\n      // browsers) will not waste time attempting to use them.\n      // (Your server will still have a /websocket endpoint.)\n      if (process.env.DISABLE_WEBSOCKETS) {\n        serverOptions.websocket = false;\n      } else {\n        serverOptions.faye_server_options = {\n          extensions: websocketExtensions()\n        };\n      }\n      self.server = sockjs.createServer(serverOptions);\n\n      // Install the sockjs handlers, but we want to keep around our own particular\n      // request handler that adjusts idle timeouts while we have an outstanding\n      // request.  This compensates for the fact that sockjs removes all listeners\n      // for \"request\" to add its own.\n      WebApp.httpServer.removeListener('request', WebApp._timeoutAdjustmentRequestCallback);\n      self.server.installHandlers(WebApp.httpServer);\n      WebApp.httpServer.addListener('request', WebApp._timeoutAdjustmentRequestCallback);\n\n      // Support the /websocket endpoint\n      self._redirectWebsocketEndpoint();\n      self.server.on('connection', function (socket) {\n        // sockjs sometimes passes us null instead of a socket object\n        // so we need to guard against that. see:\n        // https://github.com/sockjs/sockjs-node/issues/121\n        // https://github.com/meteor/meteor/issues/10468\n        if (!socket) return;\n\n        // We want to make sure that if a client connects to us and does the initial\n        // Websocket handshake but never gets to the DDP handshake, that we\n        // eventually kill the socket.  Once the DDP handshake happens, DDP\n        // heartbeating will work. And before the Websocket handshake, the timeouts\n        // we set at the server level in webapp_server.js will work. But\n        // faye-websocket calls setTimeout(0) on any socket it takes over, so there\n        // is an \"in between\" state where this doesn't happen.  We work around this\n        // by explicitly setting the socket timeout to a relatively large time here,\n        // and setting it back to zero when we set up the heartbeat in\n        // livedata_server.js.\n        socket.setWebsocketTimeout = function (timeout) {\n          if ((socket.protocol === 'websocket' || socket.protocol === 'websocket-raw') && socket._session.recv) {\n            socket._session.recv.connection.setTimeout(timeout);\n          }\n        };\n        socket.setWebsocketTimeout(45 * 1000);\n        socket.send = function (data) {\n          socket.write(data);\n        };\n        socket.on('close', function () {\n          self.open_sockets = self.open_sockets.filter(function (value) {\n            return value !== socket;\n          });\n        });\n        self.open_sockets.push(socket);\n\n        // only to send a message after connection on tests, useful for\n        // socket-stream-client/server-tests.js\n        if (process.env.TEST_METADATA && process.env.TEST_METADATA !== \"{}\") {\n          socket.send(JSON.stringify({\n            testMessageOnConnect: true\n          }));\n        }\n\n        // call all our callbacks when we get a new socket. they will do the\n        // work of setting up handlers and such for specific messages.\n        self.registration_callbacks.forEach(function (callback) {\n          callback(socket);\n        });\n      });\n    };\n    Object.assign(StreamServer.prototype, {\n      // call my callback when a new socket connects.\n      // also call it for all current connections.\n      register: function (callback) {\n        var self = this;\n        self.registration_callbacks.push(callback);\n        self.all_sockets().forEach(function (socket) {\n          callback(socket);\n        });\n      },\n      // get a list of all sockets\n      all_sockets: function () {\n        var self = this;\n        return Object.values(self.open_sockets);\n      },\n      // Redirect /websocket to /sockjs/websocket in order to not expose\n      // sockjs to clients that want to use raw websockets\n      _redirectWebsocketEndpoint: function () {\n        var self = this;\n        // Unfortunately we can't use a connect middleware here since\n        // sockjs installs itself prior to all existing listeners\n        // (meaning prior to any connect middlewares) so we need to take\n        // an approach similar to overshadowListeners in\n        // https://github.com/sockjs/sockjs-node/blob/cf820c55af6a9953e16558555a31decea554f70e/src/utils.coffee\n        ['request', 'upgrade'].forEach(event => {\n          var httpServer = WebApp.httpServer;\n          var oldHttpServerListeners = httpServer.listeners(event).slice(0);\n          httpServer.removeAllListeners(event);\n\n          // request and upgrade have different arguments passed but\n          // we only care about the first one which is always request\n          var newListener = function (request /*, moreArguments */) {\n            // Store arguments for use within the closure below\n            var args = arguments;\n\n            // TODO replace with url package\n            var url = Npm.require('url');\n\n            // Rewrite /websocket and /websocket/ urls to /sockjs/websocket while\n            // preserving query string.\n            var parsedUrl = url.parse(request.url);\n            if (parsedUrl.pathname === pathPrefix + '/websocket' || parsedUrl.pathname === pathPrefix + '/websocket/') {\n              parsedUrl.pathname = self.prefix + '/websocket';\n              request.url = url.format(parsedUrl);\n            }\n            oldHttpServerListeners.forEach(function (oldListener) {\n              oldListener.apply(httpServer, args);\n            });\n          };\n          httpServer.addListener(event, newListener);\n        });\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"livedata_server.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ddp-server/livedata_server.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let isEmpty;\n    module.link(\"lodash.isempty\", {\n      default(v) {\n        isEmpty = v;\n      }\n    }, 0);\n    let isString;\n    module.link(\"lodash.isstring\", {\n      default(v) {\n        isString = v;\n      }\n    }, 1);\n    let isObject;\n    module.link(\"lodash.isobject\", {\n      default(v) {\n        isObject = v;\n      }\n    }, 2);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    DDPServer = {};\n\n    // Publication strategies define how we handle data from published cursors at the collection level\n    // This allows someone to:\n    // - Choose a trade-off between client-server bandwidth and server memory usage\n    // - Implement special (non-mongo) collections like volatile message queues\n    const publicationStrategies = {\n      // SERVER_MERGE is the default strategy.\n      // When using this strategy, the server maintains a copy of all data a connection is subscribed to.\n      // This allows us to only send deltas over multiple publications.\n      SERVER_MERGE: {\n        useDummyDocumentView: false,\n        useCollectionView: true,\n        doAccountingForCollection: true\n      },\n      // The NO_MERGE_NO_HISTORY strategy results in the server sending all publication data\n      // directly to the client. It does not remember what it has previously sent\n      // to it will not trigger removed messages when a subscription is stopped.\n      // This should only be chosen for special use cases like send-and-forget queues.\n      NO_MERGE_NO_HISTORY: {\n        useDummyDocumentView: false,\n        useCollectionView: false,\n        doAccountingForCollection: false\n      },\n      // NO_MERGE is similar to NO_MERGE_NO_HISTORY but the server will remember the IDs it has\n      // sent to the client so it can remove them when a subscription is stopped.\n      // This strategy can be used when a collection is only used in a single publication.\n      NO_MERGE: {\n        useDummyDocumentView: false,\n        useCollectionView: false,\n        doAccountingForCollection: true\n      },\n      // NO_MERGE_MULTI is similar to `NO_MERGE`, but it does track whether a document is\n      // used by multiple publications. This has some memory overhead, but it still does not do\n      // diffing so it's faster and slimmer than SERVER_MERGE.\n      NO_MERGE_MULTI: {\n        useDummyDocumentView: true,\n        useCollectionView: true,\n        doAccountingForCollection: true\n      }\n    };\n    DDPServer.publicationStrategies = publicationStrategies;\n\n    // This file contains classes:\n    // * Session - The server's connection to a single DDP client\n    // * Subscription - A single subscription for a single client\n    // * Server - An entire server that may talk to > 1 client. A DDP endpoint.\n    //\n    // Session and Subscription are file scope. For now, until we freeze\n    // the interface, Server is package scope (in the future it should be\n    // exported).\n    var DummyDocumentView = function () {\n      var self = this;\n      self.existsIn = new Set(); // set of subscriptionHandle\n      self.dataByKey = new Map(); // key-> [ {subscriptionHandle, value} by precedence]\n    };\n    Object.assign(DummyDocumentView.prototype, {\n      getFields: function () {\n        return {};\n      },\n      clearField: function (subscriptionHandle, key, changeCollector) {\n        changeCollector[key] = undefined;\n      },\n      changeField: function (subscriptionHandle, key, value, changeCollector, isAdd) {\n        changeCollector[key] = value;\n      }\n    });\n\n    // Represents a single document in a SessionCollectionView\n    var SessionDocumentView = function () {\n      var self = this;\n      self.existsIn = new Set(); // set of subscriptionHandle\n      self.dataByKey = new Map(); // key-> [ {subscriptionHandle, value} by precedence]\n    };\n    DDPServer._SessionDocumentView = SessionDocumentView;\n    DDPServer._getCurrentFence = function () {\n      let currentInvocation = this._CurrentWriteFence.get();\n      if (currentInvocation) {\n        return currentInvocation;\n      }\n      currentInvocation = DDP._CurrentMethodInvocation.get();\n      return currentInvocation ? currentInvocation.fence : undefined;\n    };\n    Object.assign(SessionDocumentView.prototype, {\n      getFields: function () {\n        var self = this;\n        var ret = {};\n        self.dataByKey.forEach(function (precedenceList, key) {\n          ret[key] = precedenceList[0].value;\n        });\n        return ret;\n      },\n      clearField: function (subscriptionHandle, key, changeCollector) {\n        var self = this;\n        // Publish API ignores _id if present in fields\n        if (key === \"_id\") return;\n        var precedenceList = self.dataByKey.get(key);\n\n        // It's okay to clear fields that didn't exist. No need to throw\n        // an error.\n        if (!precedenceList) return;\n        var removedValue = undefined;\n        for (var i = 0; i < precedenceList.length; i++) {\n          var precedence = precedenceList[i];\n          if (precedence.subscriptionHandle === subscriptionHandle) {\n            // The view's value can only change if this subscription is the one that\n            // used to have precedence.\n            if (i === 0) removedValue = precedence.value;\n            precedenceList.splice(i, 1);\n            break;\n          }\n        }\n        if (precedenceList.length === 0) {\n          self.dataByKey.delete(key);\n          changeCollector[key] = undefined;\n        } else if (removedValue !== undefined && !EJSON.equals(removedValue, precedenceList[0].value)) {\n          changeCollector[key] = precedenceList[0].value;\n        }\n      },\n      changeField: function (subscriptionHandle, key, value, changeCollector, isAdd) {\n        var self = this;\n        // Publish API ignores _id if present in fields\n        if (key === \"_id\") return;\n\n        // Don't share state with the data passed in by the user.\n        value = EJSON.clone(value);\n        if (!self.dataByKey.has(key)) {\n          self.dataByKey.set(key, [{\n            subscriptionHandle: subscriptionHandle,\n            value: value\n          }]);\n          changeCollector[key] = value;\n          return;\n        }\n        var precedenceList = self.dataByKey.get(key);\n        var elt;\n        if (!isAdd) {\n          elt = precedenceList.find(function (precedence) {\n            return precedence.subscriptionHandle === subscriptionHandle;\n          });\n        }\n        if (elt) {\n          if (elt === precedenceList[0] && !EJSON.equals(value, elt.value)) {\n            // this subscription is changing the value of this field.\n            changeCollector[key] = value;\n          }\n          elt.value = value;\n        } else {\n          // this subscription is newly caring about this field\n          precedenceList.push({\n            subscriptionHandle: subscriptionHandle,\n            value: value\n          });\n        }\n      }\n    });\n\n    /**\n     * Represents a client's view of a single collection\n     * @param {String} collectionName Name of the collection it represents\n     * @param {Object.<String, Function>} sessionCallbacks The callbacks for added, changed, removed\n     * @class SessionCollectionView\n     */\n    var SessionCollectionView = function (collectionName, sessionCallbacks) {\n      var self = this;\n      self.collectionName = collectionName;\n      self.documents = new Map();\n      self.callbacks = sessionCallbacks;\n    };\n    DDPServer._SessionCollectionView = SessionCollectionView;\n    Object.assign(SessionCollectionView.prototype, {\n      isEmpty: function () {\n        var self = this;\n        return self.documents.size === 0;\n      },\n      diff: function (previous) {\n        var self = this;\n        DiffSequence.diffMaps(previous.documents, self.documents, {\n          both: self.diffDocument.bind(self),\n          rightOnly: function (id, nowDV) {\n            self.callbacks.added(self.collectionName, id, nowDV.getFields());\n          },\n          leftOnly: function (id, prevDV) {\n            self.callbacks.removed(self.collectionName, id);\n          }\n        });\n      },\n      diffDocument: function (id, prevDV, nowDV) {\n        var self = this;\n        var fields = {};\n        DiffSequence.diffObjects(prevDV.getFields(), nowDV.getFields(), {\n          both: function (key, prev, now) {\n            if (!EJSON.equals(prev, now)) fields[key] = now;\n          },\n          rightOnly: function (key, now) {\n            fields[key] = now;\n          },\n          leftOnly: function (key, prev) {\n            fields[key] = undefined;\n          }\n        });\n        self.callbacks.changed(self.collectionName, id, fields);\n      },\n      added: function (subscriptionHandle, id, fields) {\n        var self = this;\n        var docView = self.documents.get(id);\n        var added = false;\n        if (!docView) {\n          added = true;\n          if (Meteor.server.getPublicationStrategy(this.collectionName).useDummyDocumentView) {\n            docView = new DummyDocumentView();\n          } else {\n            docView = new SessionDocumentView();\n          }\n          self.documents.set(id, docView);\n        }\n        docView.existsIn.add(subscriptionHandle);\n        var changeCollector = {};\n        Object.entries(fields).forEach(function (_ref) {\n          let [key, value] = _ref;\n          docView.changeField(subscriptionHandle, key, value, changeCollector, true);\n        });\n        if (added) self.callbacks.added(self.collectionName, id, changeCollector);else self.callbacks.changed(self.collectionName, id, changeCollector);\n      },\n      changed: function (subscriptionHandle, id, changed) {\n        var self = this;\n        var changedResult = {};\n        var docView = self.documents.get(id);\n        if (!docView) throw new Error(\"Could not find element with id \" + id + \" to change\");\n        Object.entries(changed).forEach(function (_ref2) {\n          let [key, value] = _ref2;\n          if (value === undefined) docView.clearField(subscriptionHandle, key, changedResult);else docView.changeField(subscriptionHandle, key, value, changedResult);\n        });\n        self.callbacks.changed(self.collectionName, id, changedResult);\n      },\n      removed: function (subscriptionHandle, id) {\n        var self = this;\n        var docView = self.documents.get(id);\n        if (!docView) {\n          var err = new Error(\"Removed nonexistent document \" + id);\n          throw err;\n        }\n        docView.existsIn.delete(subscriptionHandle);\n        if (docView.existsIn.size === 0) {\n          // it is gone from everyone\n          self.callbacks.removed(self.collectionName, id);\n          self.documents.delete(id);\n        } else {\n          var changed = {};\n          // remove this subscription from every precedence list\n          // and record the changes\n          docView.dataByKey.forEach(function (precedenceList, key) {\n            docView.clearField(subscriptionHandle, key, changed);\n          });\n          self.callbacks.changed(self.collectionName, id, changed);\n        }\n      }\n    });\n\n    /******************************************************************************/\n    /* Session                                                                    */\n    /******************************************************************************/\n\n    var Session = function (server, version, socket, options) {\n      var self = this;\n      self.id = Random.id();\n      self.server = server;\n      self.version = version;\n      self.initialized = false;\n      self.socket = socket;\n\n      // Set to null when the session is destroyed. Multiple places below\n      // use this to determine if the session is alive or not.\n      self.inQueue = new Meteor._DoubleEndedQueue();\n      self.blocked = false;\n      self.workerRunning = false;\n      self.cachedUnblock = null;\n\n      // Sub objects for active subscriptions\n      self._namedSubs = new Map();\n      self._universalSubs = [];\n      self.userId = null;\n      self.collectionViews = new Map();\n\n      // Set this to false to not send messages when collectionViews are\n      // modified. This is done when rerunning subs in _setUserId and those messages\n      // are calculated via a diff instead.\n      self._isSending = true;\n\n      // If this is true, don't start a newly-created universal publisher on this\n      // session. The session will take care of starting it when appropriate.\n      self._dontStartNewUniversalSubs = false;\n\n      // When we are rerunning subscriptions, any ready messages\n      // we want to buffer up for when we are done rerunning subscriptions\n      self._pendingReady = [];\n\n      // List of callbacks to call when this connection is closed.\n      self._closeCallbacks = [];\n\n      // XXX HACK: If a sockjs connection, save off the URL. This is\n      // temporary and will go away in the near future.\n      self._socketUrl = socket.url;\n\n      // Allow tests to disable responding to pings.\n      self._respondToPings = options.respondToPings;\n\n      // This object is the public interface to the session. In the public\n      // API, it is called the `connection` object.  Internally we call it\n      // a `connectionHandle` to avoid ambiguity.\n      self.connectionHandle = {\n        id: self.id,\n        close: function () {\n          self.close();\n        },\n        onClose: function (fn) {\n          var cb = Meteor.bindEnvironment(fn, \"connection onClose callback\");\n          if (self.inQueue) {\n            self._closeCallbacks.push(cb);\n          } else {\n            // if we're already closed, call the callback.\n            Meteor.defer(cb);\n          }\n        },\n        clientAddress: self._clientAddress(),\n        httpHeaders: self.socket.headers\n      };\n      self.send({\n        msg: 'connected',\n        session: self.id\n      });\n\n      // On initial connect, spin up all the universal publishers.\n      self.startUniversalSubs();\n      if (version !== 'pre1' && options.heartbeatInterval !== 0) {\n        // We no longer need the low level timeout because we have heartbeats.\n        socket.setWebsocketTimeout(0);\n        self.heartbeat = new DDPCommon.Heartbeat({\n          heartbeatInterval: options.heartbeatInterval,\n          heartbeatTimeout: options.heartbeatTimeout,\n          onTimeout: function () {\n            self.close();\n          },\n          sendPing: function () {\n            self.send({\n              msg: 'ping'\n            });\n          }\n        });\n        self.heartbeat.start();\n      }\n      Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\"livedata\", \"sessions\", 1);\n    };\n    Object.assign(Session.prototype, {\n      sendReady: function (subscriptionIds) {\n        var self = this;\n        if (self._isSending) {\n          self.send({\n            msg: \"ready\",\n            subs: subscriptionIds\n          });\n        } else {\n          subscriptionIds.forEach(function (subscriptionId) {\n            self._pendingReady.push(subscriptionId);\n          });\n        }\n      },\n      _canSend(collectionName) {\n        return this._isSending || !this.server.getPublicationStrategy(collectionName).useCollectionView;\n      },\n      sendAdded(collectionName, id, fields) {\n        if (this._canSend(collectionName)) {\n          this.send({\n            msg: 'added',\n            collection: collectionName,\n            id,\n            fields\n          });\n        }\n      },\n      sendChanged(collectionName, id, fields) {\n        if (isEmpty(fields)) return;\n        if (this._canSend(collectionName)) {\n          this.send({\n            msg: \"changed\",\n            collection: collectionName,\n            id,\n            fields\n          });\n        }\n      },\n      sendRemoved(collectionName, id) {\n        if (this._canSend(collectionName)) {\n          this.send({\n            msg: \"removed\",\n            collection: collectionName,\n            id\n          });\n        }\n      },\n      getSendCallbacks: function () {\n        var self = this;\n        return {\n          added: self.sendAdded.bind(self),\n          changed: self.sendChanged.bind(self),\n          removed: self.sendRemoved.bind(self)\n        };\n      },\n      getCollectionView: function (collectionName) {\n        var self = this;\n        var ret = self.collectionViews.get(collectionName);\n        if (!ret) {\n          ret = new SessionCollectionView(collectionName, self.getSendCallbacks());\n          self.collectionViews.set(collectionName, ret);\n        }\n        return ret;\n      },\n      added(subscriptionHandle, collectionName, id, fields) {\n        if (this.server.getPublicationStrategy(collectionName).useCollectionView) {\n          const view = this.getCollectionView(collectionName);\n          view.added(subscriptionHandle, id, fields);\n        } else {\n          this.sendAdded(collectionName, id, fields);\n        }\n      },\n      removed(subscriptionHandle, collectionName, id) {\n        if (this.server.getPublicationStrategy(collectionName).useCollectionView) {\n          const view = this.getCollectionView(collectionName);\n          view.removed(subscriptionHandle, id);\n          if (view.isEmpty()) {\n            this.collectionViews.delete(collectionName);\n          }\n        } else {\n          this.sendRemoved(collectionName, id);\n        }\n      },\n      changed(subscriptionHandle, collectionName, id, fields) {\n        if (this.server.getPublicationStrategy(collectionName).useCollectionView) {\n          const view = this.getCollectionView(collectionName);\n          view.changed(subscriptionHandle, id, fields);\n        } else {\n          this.sendChanged(collectionName, id, fields);\n        }\n      },\n      startUniversalSubs: function () {\n        var self = this;\n        // Make a shallow copy of the set of universal handlers and start them. If\n        // additional universal publishers start while we're running them (due to\n        // yielding), they will run separately as part of Server.publish.\n        var handlers = [...self.server.universal_publish_handlers];\n        handlers.forEach(function (handler) {\n          self._startSubscription(handler);\n        });\n      },\n      // Destroy this session and unregister it at the server.\n      close: function () {\n        var self = this;\n\n        // Destroy this session, even if it's not registered at the\n        // server. Stop all processing and tear everything down. If a socket\n        // was attached, close it.\n\n        // Already destroyed.\n        if (!self.inQueue) return;\n\n        // Drop the merge box data immediately.\n        self.inQueue = null;\n        self.collectionViews = new Map();\n        if (self.heartbeat) {\n          self.heartbeat.stop();\n          self.heartbeat = null;\n        }\n        if (self.socket) {\n          self.socket.close();\n          self.socket._meteorSession = null;\n        }\n        Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\"livedata\", \"sessions\", -1);\n        Meteor.defer(function () {\n          // Stop callbacks can yield, so we defer this on close.\n          // sub._isDeactivated() detects that we set inQueue to null and\n          // treats it as semi-deactivated (it will ignore incoming callbacks, etc).\n          self._deactivateAllSubscriptions();\n\n          // Defer calling the close callbacks, so that the caller closing\n          // the session isn't waiting for all the callbacks to complete.\n          self._closeCallbacks.forEach(function (callback) {\n            callback();\n          });\n        });\n\n        // Unregister the session.\n        self.server._removeSession(self);\n      },\n      // Send a message (doing nothing if no socket is connected right now).\n      // It should be a JSON object (it will be stringified).\n      send: function (msg) {\n        const self = this;\n        if (self.socket) {\n          if (Meteor._printSentDDP) Meteor._debug(\"Sent DDP\", DDPCommon.stringifyDDP(msg));\n          self.socket.send(DDPCommon.stringifyDDP(msg));\n        }\n      },\n      // Send a connection error.\n      sendError: function (reason, offendingMessage) {\n        var self = this;\n        var msg = {\n          msg: 'error',\n          reason: reason\n        };\n        if (offendingMessage) msg.offendingMessage = offendingMessage;\n        self.send(msg);\n      },\n      // Process 'msg' as an incoming message. As a guard against\n      // race conditions during reconnection, ignore the message if\n      // 'socket' is not the currently connected socket.\n      //\n      // We run the messages from the client one at a time, in the order\n      // given by the client. The message handler is passed an idempotent\n      // function 'unblock' which it may call to allow other messages to\n      // begin running in parallel in another fiber (for example, a method\n      // that wants to yield). Otherwise, it is automatically unblocked\n      // when it returns.\n      //\n      // Actually, we don't have to 'totally order' the messages in this\n      // way, but it's the easiest thing that's correct. (unsub needs to\n      // be ordered against sub, methods need to be ordered against each\n      // other).\n      processMessage: function (msg_in) {\n        var self = this;\n        if (!self.inQueue)\n          // we have been destroyed.\n          return;\n\n        // Respond to ping and pong messages immediately without queuing.\n        // If the negotiated DDP version is \"pre1\" which didn't support\n        // pings, preserve the \"pre1\" behavior of responding with a \"bad\n        // request\" for the unknown messages.\n        //\n        // Fibers are needed because heartbeats use Meteor.setTimeout, which\n        // needs a Fiber. We could actually use regular setTimeout and avoid\n        // these new fibers, but it is easier to just make everything use\n        // Meteor.setTimeout and not think too hard.\n        //\n        // Any message counts as receiving a pong, as it demonstrates that\n        // the client is still alive.\n        if (self.heartbeat) {\n          self.heartbeat.messageReceived();\n        }\n        ;\n        if (self.version !== 'pre1' && msg_in.msg === 'ping') {\n          if (self._respondToPings) self.send({\n            msg: \"pong\",\n            id: msg_in.id\n          });\n          return;\n        }\n        if (self.version !== 'pre1' && msg_in.msg === 'pong') {\n          // Since everything is a pong, there is nothing to do\n          return;\n        }\n        self.inQueue.push(msg_in);\n        if (self.workerRunning) return;\n        self.workerRunning = true;\n        var processNext = function () {\n          var msg = self.inQueue && self.inQueue.shift();\n          if (!msg) {\n            self.workerRunning = false;\n            return;\n          }\n          function runHandlers() {\n            var blocked = true;\n            var unblock = function () {\n              if (!blocked) return; // idempotent\n              blocked = false;\n              processNext();\n            };\n            self.server.onMessageHook.each(function (callback) {\n              callback(msg, self);\n              return true;\n            });\n            if (msg.msg in self.protocol_handlers) {\n              const result = self.protocol_handlers[msg.msg].call(self, msg, unblock);\n              if (Meteor._isPromise(result)) {\n                result.finally(() => unblock());\n              } else {\n                unblock();\n              }\n            } else {\n              self.sendError('Bad request', msg);\n              unblock(); // in case the handler didn't already do it\n            }\n          }\n          runHandlers();\n        };\n        processNext();\n      },\n      protocol_handlers: {\n        sub: async function (msg, unblock) {\n          var self = this;\n\n          // cacheUnblock temporarly, so we can capture it later\n          // we will use unblock in current eventLoop, so this is safe\n          self.cachedUnblock = unblock;\n\n          // reject malformed messages\n          if (typeof msg.id !== \"string\" || typeof msg.name !== \"string\" || 'params' in msg && !(msg.params instanceof Array)) {\n            self.sendError(\"Malformed subscription\", msg);\n            return;\n          }\n          if (!self.server.publish_handlers[msg.name]) {\n            self.send({\n              msg: 'nosub',\n              id: msg.id,\n              error: new Meteor.Error(404, \"Subscription '\".concat(msg.name, \"' not found\"))\n            });\n            return;\n          }\n          if (self._namedSubs.has(msg.id))\n            // subs are idempotent, or rather, they are ignored if a sub\n            // with that id already exists. this is important during\n            // reconnect.\n            return;\n\n          // XXX It'd be much better if we had generic hooks where any package can\n          // hook into subscription handling, but in the mean while we special case\n          // ddp-rate-limiter package. This is also done for weak requirements to\n          // add the ddp-rate-limiter package in case we don't have Accounts. A\n          // user trying to use the ddp-rate-limiter must explicitly require it.\n          if (Package['ddp-rate-limiter']) {\n            var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\n            var rateLimiterInput = {\n              userId: self.userId,\n              clientAddress: self.connectionHandle.clientAddress,\n              type: \"subscription\",\n              name: msg.name,\n              connectionId: self.id\n            };\n            DDPRateLimiter._increment(rateLimiterInput);\n            var rateLimitResult = DDPRateLimiter._check(rateLimiterInput);\n            if (!rateLimitResult.allowed) {\n              self.send({\n                msg: 'nosub',\n                id: msg.id,\n                error: new Meteor.Error('too-many-requests', DDPRateLimiter.getErrorMessage(rateLimitResult), {\n                  timeToReset: rateLimitResult.timeToReset\n                })\n              });\n              return;\n            }\n          }\n          var handler = self.server.publish_handlers[msg.name];\n          await self._startSubscription(handler, msg.id, msg.params, msg.name);\n\n          // cleaning cached unblock\n          self.cachedUnblock = null;\n        },\n        unsub: function (msg) {\n          var self = this;\n          self._stopSubscription(msg.id);\n        },\n        method: async function (msg, unblock) {\n          var self = this;\n\n          // Reject malformed messages.\n          // For now, we silently ignore unknown attributes,\n          // for forwards compatibility.\n          if (typeof msg.id !== \"string\" || typeof msg.method !== \"string\" || 'params' in msg && !(msg.params instanceof Array) || 'randomSeed' in msg && typeof msg.randomSeed !== \"string\") {\n            self.sendError(\"Malformed method invocation\", msg);\n            return;\n          }\n          var randomSeed = msg.randomSeed || null;\n\n          // Set up to mark the method as satisfied once all observers\n          // (and subscriptions) have reacted to any writes that were\n          // done.\n          var fence = new DDPServer._WriteFence();\n          fence.onAllCommitted(function () {\n            // Retire the fence so that future writes are allowed.\n            // This means that callbacks like timers are free to use\n            // the fence, and if they fire before it's armed (for\n            // example, because the method waits for them) their\n            // writes will be included in the fence.\n            fence.retire();\n            self.send({\n              msg: 'updated',\n              methods: [msg.id]\n            });\n          });\n\n          // Find the handler\n          var handler = self.server.method_handlers[msg.method];\n          if (!handler) {\n            self.send({\n              msg: 'result',\n              id: msg.id,\n              error: new Meteor.Error(404, \"Method '\".concat(msg.method, \"' not found\"))\n            });\n            await fence.arm();\n            return;\n          }\n          var invocation = new DDPCommon.MethodInvocation({\n            name: msg.method,\n            isSimulation: false,\n            userId: self.userId,\n            setUserId(userId) {\n              return self._setUserId(userId);\n            },\n            unblock: unblock,\n            connection: self.connectionHandle,\n            randomSeed: randomSeed,\n            fence\n          });\n          const promise = new Promise((resolve, reject) => {\n            // XXX It'd be better if we could hook into method handlers better but\n            // for now, we need to check if the ddp-rate-limiter exists since we\n            // have a weak requirement for the ddp-rate-limiter package to be added\n            // to our application.\n            if (Package['ddp-rate-limiter']) {\n              var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\n              var rateLimiterInput = {\n                userId: self.userId,\n                clientAddress: self.connectionHandle.clientAddress,\n                type: \"method\",\n                name: msg.method,\n                connectionId: self.id\n              };\n              DDPRateLimiter._increment(rateLimiterInput);\n              var rateLimitResult = DDPRateLimiter._check(rateLimiterInput);\n              if (!rateLimitResult.allowed) {\n                reject(new Meteor.Error(\"too-many-requests\", DDPRateLimiter.getErrorMessage(rateLimitResult), {\n                  timeToReset: rateLimitResult.timeToReset\n                }));\n                return;\n              }\n            }\n            resolve(DDPServer._CurrentWriteFence.withValue(fence, () => DDP._CurrentMethodInvocation.withValue(invocation, () => maybeAuditArgumentChecks(handler, invocation, msg.params, \"call to '\" + msg.method + \"'\"))));\n          });\n          async function finish() {\n            await fence.arm();\n            unblock();\n          }\n          const payload = {\n            msg: \"result\",\n            id: msg.id\n          };\n          return promise.then(async result => {\n            await finish();\n            if (result !== undefined) {\n              payload.result = result;\n            }\n            self.send(payload);\n          }, async exception => {\n            await finish();\n            payload.error = wrapInternalException(exception, \"while invoking method '\".concat(msg.method, \"'\"));\n            self.send(payload);\n          });\n        }\n      },\n      _eachSub: function (f) {\n        var self = this;\n        self._namedSubs.forEach(f);\n        self._universalSubs.forEach(f);\n      },\n      _diffCollectionViews: function (beforeCVs) {\n        var self = this;\n        DiffSequence.diffMaps(beforeCVs, self.collectionViews, {\n          both: function (collectionName, leftValue, rightValue) {\n            rightValue.diff(leftValue);\n          },\n          rightOnly: function (collectionName, rightValue) {\n            rightValue.documents.forEach(function (docView, id) {\n              self.sendAdded(collectionName, id, docView.getFields());\n            });\n          },\n          leftOnly: function (collectionName, leftValue) {\n            leftValue.documents.forEach(function (doc, id) {\n              self.sendRemoved(collectionName, id);\n            });\n          }\n        });\n      },\n      // Sets the current user id in all appropriate contexts and reruns\n      // all subscriptions\n      async _setUserId(userId) {\n        var self = this;\n        if (userId !== null && typeof userId !== \"string\") throw new Error(\"setUserId must be called on string or null, not \" + typeof userId);\n\n        // Prevent newly-created universal subscriptions from being added to our\n        // session. They will be found below when we call startUniversalSubs.\n        //\n        // (We don't have to worry about named subscriptions, because we only add\n        // them when we process a 'sub' message. We are currently processing a\n        // 'method' message, and the method did not unblock, because it is illegal\n        // to call setUserId after unblock. Thus we cannot be concurrently adding a\n        // new named subscription).\n        self._dontStartNewUniversalSubs = true;\n\n        // Prevent current subs from updating our collectionViews and call their\n        // stop callbacks. This may yield.\n        self._eachSub(function (sub) {\n          sub._deactivate();\n        });\n\n        // All subs should now be deactivated. Stop sending messages to the client,\n        // save the state of the published collections, reset to an empty view, and\n        // update the userId.\n        self._isSending = false;\n        var beforeCVs = self.collectionViews;\n        self.collectionViews = new Map();\n        self.userId = userId;\n\n        // _setUserId is normally called from a Meteor method with\n        // DDP._CurrentMethodInvocation set. But DDP._CurrentMethodInvocation is not\n        // expected to be set inside a publish function, so we temporary unset it.\n        // Inside a publish function DDP._CurrentPublicationInvocation is set.\n        await DDP._CurrentMethodInvocation.withValue(undefined, async function () {\n          // Save the old named subs, and reset to having no subscriptions.\n          var oldNamedSubs = self._namedSubs;\n          self._namedSubs = new Map();\n          self._universalSubs = [];\n          await Promise.all([...oldNamedSubs].map(async _ref3 => {\n            let [subscriptionId, sub] = _ref3;\n            const newSub = sub._recreate();\n            self._namedSubs.set(subscriptionId, newSub);\n            // nb: if the handler throws or calls this.error(), it will in fact\n            // immediately send its 'nosub'. This is OK, though.\n            await newSub._runHandler();\n          }));\n\n          // Allow newly-created universal subs to be started on our connection in\n          // parallel with the ones we're spinning up here, and spin up universal\n          // subs.\n          self._dontStartNewUniversalSubs = false;\n          self.startUniversalSubs();\n        }, {\n          name: '_setUserId'\n        });\n\n        // Start sending messages again, beginning with the diff from the previous\n        // state of the world to the current state. No yields are allowed during\n        // this diff, so that other changes cannot interleave.\n        Meteor._noYieldsAllowed(function () {\n          self._isSending = true;\n          self._diffCollectionViews(beforeCVs);\n          if (!isEmpty(self._pendingReady)) {\n            self.sendReady(self._pendingReady);\n            self._pendingReady = [];\n          }\n        });\n      },\n      _startSubscription: function (handler, subId, params, name) {\n        var self = this;\n        var sub = new Subscription(self, handler, subId, params, name);\n        let unblockHander = self.cachedUnblock;\n        // _startSubscription may call from a lot places\n        // so cachedUnblock might be null in somecases\n        // assign the cachedUnblock\n        sub.unblock = unblockHander || (() => {});\n        if (subId) self._namedSubs.set(subId, sub);else self._universalSubs.push(sub);\n        return sub._runHandler();\n      },\n      // Tear down specified subscription\n      _stopSubscription: function (subId, error) {\n        var self = this;\n        var subName = null;\n        if (subId) {\n          var maybeSub = self._namedSubs.get(subId);\n          if (maybeSub) {\n            subName = maybeSub._name;\n            maybeSub._removeAllDocuments();\n            maybeSub._deactivate();\n            self._namedSubs.delete(subId);\n          }\n        }\n        var response = {\n          msg: 'nosub',\n          id: subId\n        };\n        if (error) {\n          response.error = wrapInternalException(error, subName ? \"from sub \" + subName + \" id \" + subId : \"from sub id \" + subId);\n        }\n        self.send(response);\n      },\n      // Tear down all subscriptions. Note that this does NOT send removed or nosub\n      // messages, since we assume the client is gone.\n      _deactivateAllSubscriptions: function () {\n        var self = this;\n        self._namedSubs.forEach(function (sub, id) {\n          sub._deactivate();\n        });\n        self._namedSubs = new Map();\n        self._universalSubs.forEach(function (sub) {\n          sub._deactivate();\n        });\n        self._universalSubs = [];\n      },\n      // Determine the remote client's IP address, based on the\n      // HTTP_FORWARDED_COUNT environment variable representing how many\n      // proxies the server is behind.\n      _clientAddress: function () {\n        var self = this;\n\n        // For the reported client address for a connection to be correct,\n        // the developer must set the HTTP_FORWARDED_COUNT environment\n        // variable to an integer representing the number of hops they\n        // expect in the `x-forwarded-for` header. E.g., set to \"1\" if the\n        // server is behind one proxy.\n        //\n        // This could be computed once at startup instead of every time.\n        var httpForwardedCount = parseInt(process.env['HTTP_FORWARDED_COUNT']) || 0;\n        if (httpForwardedCount === 0) return self.socket.remoteAddress;\n        var forwardedFor = self.socket.headers[\"x-forwarded-for\"];\n        if (!isString(forwardedFor)) return null;\n        forwardedFor = forwardedFor.trim().split(/\\s*,\\s*/);\n\n        // Typically the first value in the `x-forwarded-for` header is\n        // the original IP address of the client connecting to the first\n        // proxy.  However, the end user can easily spoof the header, in\n        // which case the first value(s) will be the fake IP address from\n        // the user pretending to be a proxy reporting the original IP\n        // address value.  By counting HTTP_FORWARDED_COUNT back from the\n        // end of the list, we ensure that we get the IP address being\n        // reported by *our* first proxy.\n\n        if (httpForwardedCount < 0 || httpForwardedCount > forwardedFor.length) return null;\n        return forwardedFor[forwardedFor.length - httpForwardedCount];\n      }\n    });\n\n    /******************************************************************************/\n    /* Subscription                                                               */\n    /******************************************************************************/\n\n    // Ctor for a sub handle: the input to each publish function\n\n    // Instance name is this because it's usually referred to as this inside a\n    // publish\n    /**\n     * @summary The server's side of a subscription\n     * @class Subscription\n     * @instanceName this\n     * @showInstanceName true\n     */\n    var Subscription = function (session, handler, subscriptionId, params, name) {\n      var self = this;\n      self._session = session; // type is Session\n\n      /**\n       * @summary Access inside the publish function. The incoming [connection](#meteor_onconnection) for this subscription.\n       * @locus Server\n       * @name  connection\n       * @memberOf Subscription\n       * @instance\n       */\n      self.connection = session.connectionHandle; // public API object\n\n      self._handler = handler;\n\n      // My subscription ID (generated by client, undefined for universal subs).\n      self._subscriptionId = subscriptionId;\n      // Undefined for universal subs\n      self._name = name;\n      self._params = params || [];\n\n      // Only named subscriptions have IDs, but we need some sort of string\n      // internally to keep track of all subscriptions inside\n      // SessionDocumentViews. We use this subscriptionHandle for that.\n      if (self._subscriptionId) {\n        self._subscriptionHandle = 'N' + self._subscriptionId;\n      } else {\n        self._subscriptionHandle = 'U' + Random.id();\n      }\n\n      // Has _deactivate been called?\n      self._deactivated = false;\n\n      // Stop callbacks to g/c this sub.  called w/ zero arguments.\n      self._stopCallbacks = [];\n\n      // The set of (collection, documentid) that this subscription has\n      // an opinion about.\n      self._documents = new Map();\n\n      // Remember if we are ready.\n      self._ready = false;\n\n      // Part of the public API: the user of this sub.\n\n      /**\n       * @summary Access inside the publish function. The id of the logged-in user, or `null` if no user is logged in.\n       * @locus Server\n       * @memberOf Subscription\n       * @name  userId\n       * @instance\n       */\n      self.userId = session.userId;\n\n      // For now, the id filter is going to default to\n      // the to/from DDP methods on MongoID, to\n      // specifically deal with mongo/minimongo ObjectIds.\n\n      // Later, you will be able to make this be \"raw\"\n      // if you want to publish a collection that you know\n      // just has strings for keys and no funny business, to\n      // a DDP consumer that isn't minimongo.\n\n      self._idFilter = {\n        idStringify: MongoID.idStringify,\n        idParse: MongoID.idParse\n      };\n      Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\"livedata\", \"subscriptions\", 1);\n    };\n    Object.assign(Subscription.prototype, {\n      _runHandler: async function () {\n        // XXX should we unblock() here? Either before running the publish\n        // function, or before running _publishCursor.\n        //\n        // Right now, each publish function blocks all future publishes and\n        // methods waiting on data from Mongo (or whatever else the function\n        // blocks on). This probably slows page load in common cases.\n\n        if (!this.unblock) {\n          this.unblock = () => {};\n        }\n        const self = this;\n        let resultOrThenable = null;\n        try {\n          resultOrThenable = DDP._CurrentPublicationInvocation.withValue(self, () => maybeAuditArgumentChecks(self._handler, self, EJSON.clone(self._params),\n          // It's OK that this would look weird for universal subscriptions,\n          // because they have no arguments so there can never be an\n          // audit-argument-checks failure.\n          \"publisher '\" + self._name + \"'\"), {\n            name: self._name\n          });\n        } catch (e) {\n          self.error(e);\n          return;\n        }\n\n        // Did the handler call this.error or this.stop?\n        if (self._isDeactivated()) return;\n\n        // Both conventional and async publish handler functions are supported.\n        // If an object is returned with a then() function, it is either a promise\n        // or thenable and will be resolved asynchronously.\n        const isThenable = resultOrThenable && typeof resultOrThenable.then === 'function';\n        if (isThenable) {\n          try {\n            await self._publishHandlerResult(await resultOrThenable);\n          } catch (e) {\n            self.error(e);\n          }\n        } else {\n          await self._publishHandlerResult(resultOrThenable);\n        }\n      },\n      async _publishHandlerResult(res) {\n        // SPECIAL CASE: Instead of writing their own callbacks that invoke\n        // this.added/changed/ready/etc, the user can just return a collection\n        // cursor or array of cursors from the publish function; we call their\n        // _publishCursor method which starts observing the cursor and publishes the\n        // results. Note that _publishCursor does NOT call ready().\n        //\n        // XXX This uses an undocumented interface which only the Mongo cursor\n        // interface publishes. Should we make this interface public and encourage\n        // users to implement it themselves? Arguably, it's unnecessary; users can\n        // already write their own functions like\n        //   var publishMyReactiveThingy = function (name, handler) {\n        //     Meteor.publish(name, function () {\n        //       var reactiveThingy = handler();\n        //       reactiveThingy.publishMe();\n        //     });\n        //   };\n\n        var self = this;\n        var isCursor = function (c) {\n          return c && c._publishCursor;\n        };\n        if (isCursor(res)) {\n          try {\n            await res._publishCursor(self);\n          } catch (e) {\n            self.error(e);\n            return;\n          }\n          // _publishCursor only returns after the initial added callbacks have run.\n          // mark subscription as ready.\n          self.ready();\n        } else if (Array.isArray(res)) {\n          // Check all the elements are cursors\n          if (!res.every(isCursor)) {\n            self.error(new Error(\"Publish function returned an array of non-Cursors\"));\n            return;\n          }\n          // Find duplicate collection names\n          // XXX we should support overlapping cursors, but that would require the\n          // merge box to allow overlap within a subscription\n          var collectionNames = {};\n          for (var i = 0; i < res.length; ++i) {\n            var collectionName = res[i]._getCollectionName();\n            if (collectionNames[collectionName]) {\n              self.error(new Error(\"Publish function returned multiple cursors for collection \" + collectionName));\n              return;\n            }\n            collectionNames[collectionName] = true;\n          }\n          try {\n            await Promise.all(res.map(cur => cur._publishCursor(self)));\n          } catch (e) {\n            self.error(e);\n            return;\n          }\n          self.ready();\n        } else if (res) {\n          // Truthy values other than cursors or arrays are probably a\n          // user mistake (possible returning a Mongo document via, say,\n          // `coll.findOne()`).\n          self.error(new Error(\"Publish function can only return a Cursor or \" + \"an array of Cursors\"));\n        }\n      },\n      // This calls all stop callbacks and prevents the handler from updating any\n      // SessionCollectionViews further. It's used when the user unsubscribes or\n      // disconnects, as well as during setUserId re-runs. It does *NOT* send\n      // removed messages for the published objects; if that is necessary, call\n      // _removeAllDocuments first.\n      _deactivate: function () {\n        var self = this;\n        if (self._deactivated) return;\n        self._deactivated = true;\n        self._callStopCallbacks();\n        Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\"livedata\", \"subscriptions\", -1);\n      },\n      _callStopCallbacks: function () {\n        var self = this;\n        // Tell listeners, so they can clean up\n        var callbacks = self._stopCallbacks;\n        self._stopCallbacks = [];\n        callbacks.forEach(function (callback) {\n          callback();\n        });\n      },\n      // Send remove messages for every document.\n      _removeAllDocuments: function () {\n        var self = this;\n        Meteor._noYieldsAllowed(function () {\n          self._documents.forEach(function (collectionDocs, collectionName) {\n            collectionDocs.forEach(function (strId) {\n              self.removed(collectionName, self._idFilter.idParse(strId));\n            });\n          });\n        });\n      },\n      // Returns a new Subscription for the same session with the same\n      // initial creation parameters. This isn't a clone: it doesn't have\n      // the same _documents cache, stopped state or callbacks; may have a\n      // different _subscriptionHandle, and gets its userId from the\n      // session, not from this object.\n      _recreate: function () {\n        var self = this;\n        return new Subscription(self._session, self._handler, self._subscriptionId, self._params, self._name);\n      },\n      /**\n       * @summary Call inside the publish function.  Stops this client's subscription, triggering a call on the client to the `onStop` callback passed to [`Meteor.subscribe`](#meteor_subscribe), if any. If `error` is not a [`Meteor.Error`](#meteor_error), it will be [sanitized](#meteor_error).\n       * @locus Server\n       * @param {Error} error The error to pass to the client.\n       * @instance\n       * @memberOf Subscription\n       */\n      error: function (error) {\n        var self = this;\n        if (self._isDeactivated()) return;\n        self._session._stopSubscription(self._subscriptionId, error);\n      },\n      // Note that while our DDP client will notice that you've called stop() on the\n      // server (and clean up its _subscriptions table) we don't actually provide a\n      // mechanism for an app to notice this (the subscribe onError callback only\n      // triggers if there is an error).\n\n      /**\n       * @summary Call inside the publish function.  Stops this client's subscription and invokes the client's `onStop` callback with no error.\n       * @locus Server\n       * @instance\n       * @memberOf Subscription\n       */\n      stop: function () {\n        var self = this;\n        if (self._isDeactivated()) return;\n        self._session._stopSubscription(self._subscriptionId);\n      },\n      /**\n       * @summary Call inside the publish function.  Registers a callback function to run when the subscription is stopped.\n       * @locus Server\n       * @memberOf Subscription\n       * @instance\n       * @param {Function} func The callback function\n       */\n      onStop: function (callback) {\n        var self = this;\n        callback = Meteor.bindEnvironment(callback, 'onStop callback', self);\n        if (self._isDeactivated()) callback();else self._stopCallbacks.push(callback);\n      },\n      // This returns true if the sub has been deactivated, *OR* if the session was\n      // destroyed but the deferred call to _deactivateAllSubscriptions hasn't\n      // happened yet.\n      _isDeactivated: function () {\n        var self = this;\n        return self._deactivated || self._session.inQueue === null;\n      },\n      /**\n       * @summary Call inside the publish function.  Informs the subscriber that a document has been added to the record set.\n       * @locus Server\n       * @memberOf Subscription\n       * @instance\n       * @param {String} collection The name of the collection that contains the new document.\n       * @param {String} id The new document's ID.\n       * @param {Object} fields The fields in the new document.  If `_id` is present it is ignored.\n       */\n      added(collectionName, id, fields) {\n        if (this._isDeactivated()) return;\n        id = this._idFilter.idStringify(id);\n        if (this._session.server.getPublicationStrategy(collectionName).doAccountingForCollection) {\n          let ids = this._documents.get(collectionName);\n          if (ids == null) {\n            ids = new Set();\n            this._documents.set(collectionName, ids);\n          }\n          ids.add(id);\n        }\n        this._session.added(this._subscriptionHandle, collectionName, id, fields);\n      },\n      /**\n       * @summary Call inside the publish function.  Informs the subscriber that a document in the record set has been modified.\n       * @locus Server\n       * @memberOf Subscription\n       * @instance\n       * @param {String} collection The name of the collection that contains the changed document.\n       * @param {String} id The changed document's ID.\n       * @param {Object} fields The fields in the document that have changed, together with their new values.  If a field is not present in `fields` it was left unchanged; if it is present in `fields` and has a value of `undefined` it was removed from the document.  If `_id` is present it is ignored.\n       */\n      changed(collectionName, id, fields) {\n        if (this._isDeactivated()) return;\n        id = this._idFilter.idStringify(id);\n        this._session.changed(this._subscriptionHandle, collectionName, id, fields);\n      },\n      /**\n       * @summary Call inside the publish function.  Informs the subscriber that a document has been removed from the record set.\n       * @locus Server\n       * @memberOf Subscription\n       * @instance\n       * @param {String} collection The name of the collection that the document has been removed from.\n       * @param {String} id The ID of the document that has been removed.\n       */\n      removed(collectionName, id) {\n        if (this._isDeactivated()) return;\n        id = this._idFilter.idStringify(id);\n        if (this._session.server.getPublicationStrategy(collectionName).doAccountingForCollection) {\n          // We don't bother to delete sets of things in a collection if the\n          // collection is empty.  It could break _removeAllDocuments.\n          this._documents.get(collectionName).delete(id);\n        }\n        this._session.removed(this._subscriptionHandle, collectionName, id);\n      },\n      /**\n       * @summary Call inside the publish function.  Informs the subscriber that an initial, complete snapshot of the record set has been sent.  This will trigger a call on the client to the `onReady` callback passed to  [`Meteor.subscribe`](#meteor_subscribe), if any.\n       * @locus Server\n       * @memberOf Subscription\n       * @instance\n       */\n      ready: function () {\n        var self = this;\n        if (self._isDeactivated()) return;\n        if (!self._subscriptionId) return; // Unnecessary but ignored for universal sub\n        if (!self._ready) {\n          self._session.sendReady([self._subscriptionId]);\n          self._ready = true;\n        }\n      }\n    });\n\n    /******************************************************************************/\n    /* Server                                                                     */\n    /******************************************************************************/\n\n    Server = function () {\n      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var self = this;\n\n      // The default heartbeat interval is 30 seconds on the server and 35\n      // seconds on the client.  Since the client doesn't need to send a\n      // ping as long as it is receiving pings, this means that pings\n      // normally go from the server to the client.\n      //\n      // Note: Troposphere depends on the ability to mutate\n      // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.\n      self.options = _objectSpread({\n        heartbeatInterval: 15000,\n        heartbeatTimeout: 15000,\n        // For testing, allow responding to pings to be disabled.\n        respondToPings: true,\n        defaultPublicationStrategy: publicationStrategies.SERVER_MERGE\n      }, options);\n\n      // Map of callbacks to call when a new connection comes in to the\n      // server and completes DDP version negotiation. Use an object instead\n      // of an array so we can safely remove one from the list while\n      // iterating over it.\n      self.onConnectionHook = new Hook({\n        debugPrintExceptions: \"onConnection callback\"\n      });\n\n      // Map of callbacks to call when a new message comes in.\n      self.onMessageHook = new Hook({\n        debugPrintExceptions: \"onMessage callback\"\n      });\n      self.publish_handlers = {};\n      self.universal_publish_handlers = [];\n      self.method_handlers = {};\n      self._publicationStrategies = {};\n      self.sessions = new Map(); // map from id to session\n\n      self.stream_server = new StreamServer();\n      self.stream_server.register(function (socket) {\n        // socket implements the SockJSConnection interface\n        socket._meteorSession = null;\n        var sendError = function (reason, offendingMessage) {\n          var msg = {\n            msg: 'error',\n            reason: reason\n          };\n          if (offendingMessage) msg.offendingMessage = offendingMessage;\n          socket.send(DDPCommon.stringifyDDP(msg));\n        };\n        socket.on('data', function (raw_msg) {\n          if (Meteor._printReceivedDDP) {\n            Meteor._debug(\"Received DDP\", raw_msg);\n          }\n          try {\n            try {\n              var msg = DDPCommon.parseDDP(raw_msg);\n            } catch (err) {\n              sendError('Parse error');\n              return;\n            }\n            if (msg === null || !msg.msg) {\n              sendError('Bad request', msg);\n              return;\n            }\n            if (msg.msg === 'connect') {\n              if (socket._meteorSession) {\n                sendError(\"Already connected\", msg);\n                return;\n              }\n              self._handleConnect(socket, msg);\n              return;\n            }\n            if (!socket._meteorSession) {\n              sendError('Must connect first', msg);\n              return;\n            }\n            socket._meteorSession.processMessage(msg);\n          } catch (e) {\n            // XXX print stack nicely\n            Meteor._debug(\"Internal exception while processing message\", msg, e);\n          }\n        });\n        socket.on('close', function () {\n          if (socket._meteorSession) {\n            socket._meteorSession.close();\n          }\n        });\n      });\n    };\n    Object.assign(Server.prototype, {\n      /**\n       * @summary Register a callback to be called when a new DDP connection is made to the server.\n       * @locus Server\n       * @param {function} callback The function to call when a new DDP connection is established.\n       * @memberOf Meteor\n       * @importFromPackage meteor\n       */\n      onConnection: function (fn) {\n        var self = this;\n        return self.onConnectionHook.register(fn);\n      },\n      /**\n       * @summary Set publication strategy for the given publication. Publications strategies are available from `DDPServer.publicationStrategies`. You call this method from `Meteor.server`, like `Meteor.server.setPublicationStrategy()`\n       * @locus Server\n       * @alias setPublicationStrategy\n       * @param publicationName {String}\n       * @param strategy {{useCollectionView: boolean, doAccountingForCollection: boolean}}\n       * @memberOf Meteor.server\n       * @importFromPackage meteor\n       */\n      setPublicationStrategy(publicationName, strategy) {\n        if (!Object.values(publicationStrategies).includes(strategy)) {\n          throw new Error(\"Invalid merge strategy: \".concat(strategy, \" \\n        for collection \").concat(publicationName));\n        }\n        this._publicationStrategies[publicationName] = strategy;\n      },\n      /**\n       * @summary Gets the publication strategy for the requested publication. You call this method from `Meteor.server`, like `Meteor.server.getPublicationStrategy()`\n       * @locus Server\n       * @alias getPublicationStrategy\n       * @param publicationName {String}\n       * @memberOf Meteor.server\n       * @importFromPackage meteor\n       * @return {{useCollectionView: boolean, doAccountingForCollection: boolean}}\n       */\n      getPublicationStrategy(publicationName) {\n        return this._publicationStrategies[publicationName] || this.options.defaultPublicationStrategy;\n      },\n      /**\n       * @summary Register a callback to be called when a new DDP message is received.\n       * @locus Server\n       * @param {function} callback The function to call when a new DDP message is received.\n       * @memberOf Meteor\n       * @importFromPackage meteor\n       */\n      onMessage: function (fn) {\n        var self = this;\n        return self.onMessageHook.register(fn);\n      },\n      _handleConnect: function (socket, msg) {\n        var self = this;\n\n        // The connect message must specify a version and an array of supported\n        // versions, and it must claim to support what it is proposing.\n        if (!(typeof msg.version === 'string' && Array.isArray(msg.support) && msg.support.every(isString) && msg.support.includes(msg.version))) {\n          socket.send(DDPCommon.stringifyDDP({\n            msg: 'failed',\n            version: DDPCommon.SUPPORTED_DDP_VERSIONS[0]\n          }));\n          socket.close();\n          return;\n        }\n\n        // In the future, handle session resumption: something like:\n        //  socket._meteorSession = self.sessions[msg.session]\n        var version = calculateVersion(msg.support, DDPCommon.SUPPORTED_DDP_VERSIONS);\n        if (msg.version !== version) {\n          // The best version to use (according to the client's stated preferences)\n          // is not the one the client is trying to use. Inform them about the best\n          // version to use.\n          socket.send(DDPCommon.stringifyDDP({\n            msg: 'failed',\n            version: version\n          }));\n          socket.close();\n          return;\n        }\n\n        // Yay, version matches! Create a new session.\n        // Note: Troposphere depends on the ability to mutate\n        // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.\n        socket._meteorSession = new Session(self, version, socket, self.options);\n        self.sessions.set(socket._meteorSession.id, socket._meteorSession);\n        self.onConnectionHook.each(function (callback) {\n          if (socket._meteorSession) callback(socket._meteorSession.connectionHandle);\n          return true;\n        });\n      },\n      /**\n       * Register a publish handler function.\n       *\n       * @param name {String} identifier for query\n       * @param handler {Function} publish handler\n       * @param options {Object}\n       *\n       * Server will call handler function on each new subscription,\n       * either when receiving DDP sub message for a named subscription, or on\n       * DDP connect for a universal subscription.\n       *\n       * If name is null, this will be a subscription that is\n       * automatically established and permanently on for all connected\n       * client, instead of a subscription that can be turned on and off\n       * with subscribe().\n       *\n       * options to contain:\n       *  - (mostly internal) is_auto: true if generated automatically\n       *    from an autopublish hook. this is for cosmetic purposes only\n       *    (it lets us determine whether to print a warning suggesting\n       *    that you turn off autopublish).\n       */\n\n      /**\n       * @summary Publish a record set.\n       * @memberOf Meteor\n       * @importFromPackage meteor\n       * @locus Server\n       * @param {String|Object} name If String, name of the record set.  If Object, publications Dictionary of publish functions by name.  If `null`, the set has no name, and the record set is automatically sent to all connected clients.\n       * @param {Function} func Function called on the server each time a client subscribes.  Inside the function, `this` is the publish handler object, described below.  If the client passed arguments to `subscribe`, the function is called with the same arguments.\n       */\n      publish: function (name, handler, options) {\n        var self = this;\n        if (!isObject(name)) {\n          options = options || {};\n          if (name && name in self.publish_handlers) {\n            Meteor._debug(\"Ignoring duplicate publish named '\" + name + \"'\");\n            return;\n          }\n          if (Package.autopublish && !options.is_auto) {\n            // They have autopublish on, yet they're trying to manually\n            // pick stuff to publish. They probably should turn off\n            // autopublish. (This check isn't perfect -- if you create a\n            // publish before you turn on autopublish, it won't catch\n            // it, but this will definitely handle the simple case where\n            // you've added the autopublish package to your app, and are\n            // calling publish from your app code).\n            if (!self.warned_about_autopublish) {\n              self.warned_about_autopublish = true;\n              Meteor._debug(\"** You've set up some data subscriptions with Meteor.publish(), but\\n\" + \"** you still have autopublish turned on. Because autopublish is still\\n\" + \"** on, your Meteor.publish() calls won't have much effect. All data\\n\" + \"** will still be sent to all clients.\\n\" + \"**\\n\" + \"** Turn off autopublish by removing the autopublish package:\\n\" + \"**\\n\" + \"**   $ meteor remove autopublish\\n\" + \"**\\n\" + \"** .. and make sure you have Meteor.publish() and Meteor.subscribe() calls\\n\" + \"** for each collection that you want clients to see.\\n\");\n            }\n          }\n          if (name) self.publish_handlers[name] = handler;else {\n            self.universal_publish_handlers.push(handler);\n            // Spin up the new publisher on any existing session too. Run each\n            // session's subscription in a new Fiber, so that there's no change for\n            // self.sessions to change while we're running this loop.\n            self.sessions.forEach(function (session) {\n              if (!session._dontStartNewUniversalSubs) {\n                session._startSubscription(handler);\n              }\n            });\n          }\n        } else {\n          Object.entries(name).forEach(function (_ref4) {\n            let [key, value] = _ref4;\n            self.publish(key, value, {});\n          });\n        }\n      },\n      _removeSession: function (session) {\n        var self = this;\n        self.sessions.delete(session.id);\n      },\n      /**\n       * @summary Tells if the method call came from a call or a callAsync.\n       * @locus Anywhere\n       * @memberOf Meteor\n       * @importFromPackage meteor\n       * @returns boolean\n       */\n      isAsyncCall: function () {\n        return DDP._CurrentMethodInvocation._isCallAsyncMethodRunning();\n      },\n      /**\n       * @summary Defines functions that can be invoked over the network by clients.\n       * @locus Anywhere\n       * @param {Object} methods Dictionary whose keys are method names and values are functions.\n       * @memberOf Meteor\n       * @importFromPackage meteor\n       */\n      methods: function (methods) {\n        var self = this;\n        Object.entries(methods).forEach(function (_ref5) {\n          let [name, func] = _ref5;\n          if (typeof func !== 'function') throw new Error(\"Method '\" + name + \"' must be a function\");\n          if (self.method_handlers[name]) throw new Error(\"A method named '\" + name + \"' is already defined\");\n          self.method_handlers[name] = func;\n        });\n      },\n      call: function (name) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        if (args.length && typeof args[args.length - 1] === \"function\") {\n          // If it's a function, the last argument is the result callback, not\n          // a parameter to the remote method.\n          var callback = args.pop();\n        }\n        return this.apply(name, args, callback);\n      },\n      // A version of the call method that always returns a Promise.\n      callAsync: function (name) {\n        var _args$;\n        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          args[_key2 - 1] = arguments[_key2];\n        }\n        const options = (_args$ = args[0]) !== null && _args$ !== void 0 && _args$.hasOwnProperty('returnStubValue') ? args.shift() : {};\n        DDP._CurrentMethodInvocation._setCallAsyncMethodRunning(true);\n        const promise = new Promise((resolve, reject) => {\n          DDP._CurrentCallAsyncInvocation._set({\n            name,\n            hasCallAsyncParent: true\n          });\n          this.applyAsync(name, args, _objectSpread({\n            isFromCallAsync: true\n          }, options)).then(resolve).catch(reject).finally(() => {\n            DDP._CurrentCallAsyncInvocation._set();\n          });\n        });\n        return promise.finally(() => DDP._CurrentMethodInvocation._setCallAsyncMethodRunning(false));\n      },\n      apply: function (name, args, options, callback) {\n        // We were passed 3 arguments. They may be either (name, args, options)\n        // or (name, args, callback)\n        if (!callback && typeof options === 'function') {\n          callback = options;\n          options = {};\n        } else {\n          options = options || {};\n        }\n        const promise = this.applyAsync(name, args, options);\n\n        // Return the result in whichever way the caller asked for it. Note that we\n        // do NOT block on the write fence in an analogous way to how the client\n        // blocks on the relevant data being visible, so you are NOT guaranteed that\n        // cursor observe callbacks have fired when your callback is invoked. (We\n        // can change this if there's a real use case).\n        if (callback) {\n          promise.then(result => callback(undefined, result), exception => callback(exception));\n        } else {\n          return promise;\n        }\n      },\n      // @param options {Optional Object}\n      applyAsync: function (name, args, options) {\n        // Run the handler\n        var handler = this.method_handlers[name];\n        if (!handler) {\n          return Promise.reject(new Meteor.Error(404, \"Method '\".concat(name, \"' not found\")));\n        }\n        // If this is a method call from within another method or publish function,\n        // get the user state from the outer method or publish function, otherwise\n        // don't allow setUserId to be called\n        var userId = null;\n        let setUserId = () => {\n          throw new Error(\"Can't call setUserId on a server initiated method call\");\n        };\n        var connection = null;\n        var currentMethodInvocation = DDP._CurrentMethodInvocation.get();\n        var currentPublicationInvocation = DDP._CurrentPublicationInvocation.get();\n        var randomSeed = null;\n        if (currentMethodInvocation) {\n          userId = currentMethodInvocation.userId;\n          setUserId = userId => currentMethodInvocation.setUserId(userId);\n          connection = currentMethodInvocation.connection;\n          randomSeed = DDPCommon.makeRpcSeed(currentMethodInvocation, name);\n        } else if (currentPublicationInvocation) {\n          userId = currentPublicationInvocation.userId;\n          setUserId = userId => currentPublicationInvocation._session._setUserId(userId);\n          connection = currentPublicationInvocation.connection;\n        }\n        var invocation = new DDPCommon.MethodInvocation({\n          isSimulation: false,\n          userId,\n          setUserId,\n          connection,\n          randomSeed\n        });\n        return new Promise((resolve, reject) => {\n          let result;\n          try {\n            result = DDP._CurrentMethodInvocation.withValue(invocation, () => maybeAuditArgumentChecks(handler, invocation, EJSON.clone(args), \"internal call to '\" + name + \"'\"));\n          } catch (e) {\n            return reject(e);\n          }\n          if (!Meteor._isPromise(result)) {\n            return resolve(result);\n          }\n          result.then(r => resolve(r)).catch(reject);\n        }).then(EJSON.clone);\n      },\n      _urlForSession: function (sessionId) {\n        var self = this;\n        var session = self.sessions.get(sessionId);\n        if (session) return session._socketUrl;else return null;\n      }\n    });\n    var calculateVersion = function (clientSupportedVersions, serverSupportedVersions) {\n      var correctVersion = clientSupportedVersions.find(function (version) {\n        return serverSupportedVersions.includes(version);\n      });\n      if (!correctVersion) {\n        correctVersion = serverSupportedVersions[0];\n      }\n      return correctVersion;\n    };\n    DDPServer._calculateVersion = calculateVersion;\n\n    // \"blind\" exceptions other than those that were deliberately thrown to signal\n    // errors to the client\n    var wrapInternalException = function (exception, context) {\n      if (!exception) return exception;\n\n      // To allow packages to throw errors intended for the client but not have to\n      // depend on the Meteor.Error class, `isClientSafe` can be set to true on any\n      // error before it is thrown.\n      if (exception.isClientSafe) {\n        if (!(exception instanceof Meteor.Error)) {\n          const originalMessage = exception.message;\n          exception = new Meteor.Error(exception.error, exception.reason, exception.details);\n          exception.message = originalMessage;\n        }\n        return exception;\n      }\n\n      // Tests can set the '_expectedByTest' flag on an exception so it won't go to\n      // the server log.\n      if (!exception._expectedByTest) {\n        Meteor._debug(\"Exception \" + context, exception.stack);\n        if (exception.sanitizedError) {\n          Meteor._debug(\"Sanitized and reported to the client as:\", exception.sanitizedError);\n          Meteor._debug();\n        }\n      }\n\n      // Did the error contain more details that could have been useful if caught in\n      // server code (or if thrown from non-client-originated code), but also\n      // provided a \"sanitized\" version with more context than 500 Internal server error? Use that.\n      if (exception.sanitizedError) {\n        if (exception.sanitizedError.isClientSafe) return exception.sanitizedError;\n        Meteor._debug(\"Exception \" + context + \" provides a sanitizedError that \" + \"does not have isClientSafe property set; ignoring\");\n      }\n      return new Meteor.Error(500, \"Internal server error\");\n    };\n\n    // Audit argument checks, if the audit-argument-checks package exists (it is a\n    // weak dependency of this package).\n    var maybeAuditArgumentChecks = function (f, context, args, description) {\n      args = args || [];\n      if (Package['audit-argument-checks']) {\n        return Match._failIfArgumentsAreNotAllChecked(f, context, args, description);\n      }\n      return f.apply(context, args);\n    };\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"writefence.js\":function module(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ddp-server/writefence.js                                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// A write fence collects a group of writes, and provides a callback\n// when all of the writes are fully committed and propagated (all\n// observers have been notified of the write and acknowledged it.)\n//\nDDPServer._WriteFence = class {\n  constructor() {\n    this.armed = false;\n    this.fired = false;\n    this.retired = false;\n    this.outstanding_writes = 0;\n    this.before_fire_callbacks = [];\n    this.completion_callbacks = [];\n  }\n\n  // Start tracking a write, and return an object to represent it. The\n  // object has a single method, committed(). This method should be\n  // called when the write is fully committed and propagated. You can\n  // continue to add writes to the WriteFence up until it is triggered\n  // (calls its callbacks because all writes have committed.)\n  beginWrite() {\n    if (this.retired) return {\n      committed: function () {}\n    };\n    if (this.fired) throw new Error(\"fence has already activated -- too late to add writes\");\n    this.outstanding_writes++;\n    let committed = false;\n    const _committedFn = async () => {\n      if (committed) throw new Error(\"committed called twice on the same write\");\n      committed = true;\n      this.outstanding_writes--;\n      await this._maybeFire();\n    };\n    return {\n      committed: _committedFn\n    };\n  }\n\n  // Arm the fence. Once the fence is armed, and there are no more\n  // uncommitted writes, it will activate.\n  arm() {\n    if (this === DDPServer._getCurrentFence()) throw Error(\"Can't arm the current fence\");\n    this.armed = true;\n    return this._maybeFire();\n  }\n\n  // Register a function to be called once before firing the fence.\n  // Callback function can add new writes to the fence, in which case\n  // it won't fire until those writes are done as well.\n  onBeforeFire(func) {\n    if (this.fired) throw new Error(\"fence has already activated -- too late to \" + \"add a callback\");\n    this.before_fire_callbacks.push(func);\n  }\n\n  // Register a function to be called when the fence fires.\n  onAllCommitted(func) {\n    if (this.fired) throw new Error(\"fence has already activated -- too late to \" + \"add a callback\");\n    this.completion_callbacks.push(func);\n  }\n  async _armAndWait() {\n    let resolver;\n    const returnValue = new Promise(r => resolver = r);\n    this.onAllCommitted(resolver);\n    await this.arm();\n    return returnValue;\n  }\n  // Convenience function. Arms the fence, then blocks until it fires.\n  async armAndWait() {\n    return this._armAndWait();\n  }\n  async _maybeFire() {\n    if (this.fired) throw new Error(\"write fence already activated?\");\n    if (this.armed && !this.outstanding_writes) {\n      const invokeCallback = async func => {\n        try {\n          await func(this);\n        } catch (err) {\n          Meteor._debug(\"exception in write fence callback:\", err);\n        }\n      };\n      this.outstanding_writes++;\n      while (this.before_fire_callbacks.length > 0) {\n        const cb = this.before_fire_callbacks.shift();\n        await invokeCallback(cb);\n      }\n      this.outstanding_writes--;\n      if (!this.outstanding_writes) {\n        this.fired = true;\n        const callbacks = this.completion_callbacks || [];\n        this.completion_callbacks = [];\n        while (callbacks.length > 0) {\n          const cb = callbacks.shift();\n          await invokeCallback(cb);\n        }\n      }\n    }\n  }\n\n  // Deactivate this fence so that adding more writes has no effect.\n  // The fence must have already fired.\n  retire() {\n    if (!this.fired) throw new Error(\"Can't retire a fence that hasn't fired.\");\n    this.retired = true;\n  }\n};\n\n// The current write fence. When there is a current write fence, code\n// that writes to databases should register their writes with it using\n// beginWrite().\n//\nDDPServer._CurrentWriteFence = new Meteor.EnvironmentVariable();\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"crossbar.js\":function module(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ddp-server/crossbar.js                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// A \"crossbar\" is a class that provides structured notification registration.\n// See _match for the definition of how a notification matches a trigger.\n// All notifications and triggers must have a string key named 'collection'.\n\nDDPServer._Crossbar = function (options) {\n  var self = this;\n  options = options || {};\n  self.nextId = 1;\n  // map from collection name (string) -> listener id -> object. each object has\n  // keys 'trigger', 'callback'.  As a hack, the empty string means \"no\n  // collection\".\n  self.listenersByCollection = {};\n  self.listenersByCollectionCount = {};\n  self.factPackage = options.factPackage || \"livedata\";\n  self.factName = options.factName || null;\n};\nObject.assign(DDPServer._Crossbar.prototype, {\n  // msg is a trigger or a notification\n  _collectionForMessage: function (msg) {\n    var self = this;\n    if (!('collection' in msg)) {\n      return '';\n    } else if (typeof msg.collection === 'string') {\n      if (msg.collection === '') throw Error(\"Message has empty collection!\");\n      return msg.collection;\n    } else {\n      throw Error(\"Message has non-string collection!\");\n    }\n  },\n  // Listen for notification that match 'trigger'. A notification\n  // matches if it has the key-value pairs in trigger as a\n  // subset. When a notification matches, call 'callback', passing\n  // the actual notification.\n  //\n  // Returns a listen handle, which is an object with a method\n  // stop(). Call stop() to stop listening.\n  //\n  // XXX It should be legal to call fire() from inside a listen()\n  // callback?\n  listen: function (trigger, callback) {\n    var self = this;\n    var id = self.nextId++;\n    var collection = self._collectionForMessage(trigger);\n    var record = {\n      trigger: EJSON.clone(trigger),\n      callback: callback\n    };\n    if (!(collection in self.listenersByCollection)) {\n      self.listenersByCollection[collection] = {};\n      self.listenersByCollectionCount[collection] = 0;\n    }\n    self.listenersByCollection[collection][id] = record;\n    self.listenersByCollectionCount[collection]++;\n    if (self.factName && Package['facts-base']) {\n      Package['facts-base'].Facts.incrementServerFact(self.factPackage, self.factName, 1);\n    }\n    return {\n      stop: function () {\n        if (self.factName && Package['facts-base']) {\n          Package['facts-base'].Facts.incrementServerFact(self.factPackage, self.factName, -1);\n        }\n        delete self.listenersByCollection[collection][id];\n        self.listenersByCollectionCount[collection]--;\n        if (self.listenersByCollectionCount[collection] === 0) {\n          delete self.listenersByCollection[collection];\n          delete self.listenersByCollectionCount[collection];\n        }\n      }\n    };\n  },\n  // Fire the provided 'notification' (an object whose attribute\n  // values are all JSON-compatibile) -- inform all matching listeners\n  // (registered with listen()).\n  //\n  // If fire() is called inside a write fence, then each of the\n  // listener callbacks will be called inside the write fence as well.\n  //\n  // The listeners may be invoked in parallel, rather than serially.\n  fire: async function (notification) {\n    var self = this;\n    var collection = self._collectionForMessage(notification);\n    if (!(collection in self.listenersByCollection)) {\n      return;\n    }\n    var listenersForCollection = self.listenersByCollection[collection];\n    var callbackIds = [];\n    Object.entries(listenersForCollection).forEach(function (_ref) {\n      let [id, l] = _ref;\n      if (self._matches(notification, l.trigger)) {\n        callbackIds.push(id);\n      }\n    });\n\n    // Listener callbacks can yield, so we need to first find all the ones that\n    // match in a single iteration over self.listenersByCollection (which can't\n    // be mutated during this iteration), and then invoke the matching\n    // callbacks, checking before each call to ensure they haven't stopped.\n    // Note that we don't have to check that\n    // self.listenersByCollection[collection] still === listenersForCollection,\n    // because the only way that stops being true is if listenersForCollection\n    // first gets reduced down to the empty object (and then never gets\n    // increased again).\n    for (const id of callbackIds) {\n      if (id in listenersForCollection) {\n        await listenersForCollection[id].callback(notification);\n      }\n    }\n  },\n  // A notification matches a trigger if all keys that exist in both are equal.\n  //\n  // Examples:\n  //  N:{collection: \"C\"} matches T:{collection: \"C\"}\n  //    (a non-targeted write to a collection matches a\n  //     non-targeted query)\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\"}\n  //    (a targeted write to a collection matches a non-targeted query)\n  //  N:{collection: \"C\"} matches T:{collection: \"C\", id: \"X\"}\n  //    (a non-targeted write to a collection matches a\n  //     targeted query)\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\", id: \"X\"}\n  //    (a targeted write to a collection matches a targeted query targeted\n  //     at the same document)\n  //  N:{collection: \"C\", id: \"X\"} does not match T:{collection: \"C\", id: \"Y\"}\n  //    (a targeted write to a collection does not match a targeted query\n  //     targeted at a different document)\n  _matches: function (notification, trigger) {\n    // Most notifications that use the crossbar have a string `collection` and\n    // maybe an `id` that is a string or ObjectID. We're already dividing up\n    // triggers by collection, but let's fast-track \"nope, different ID\" (and\n    // avoid the overly generic EJSON.equals). This makes a noticeable\n    // performance difference; see https://github.com/meteor/meteor/pull/3697\n    if (typeof notification.id === 'string' && typeof trigger.id === 'string' && notification.id !== trigger.id) {\n      return false;\n    }\n    if (notification.id instanceof MongoID.ObjectID && trigger.id instanceof MongoID.ObjectID && !notification.id.equals(trigger.id)) {\n      return false;\n    }\n    return Object.keys(trigger).every(function (key) {\n      return !(key in notification) || EJSON.equals(trigger[key], notification[key]);\n    });\n  }\n});\n\n// The \"invalidation crossbar\" is a specific instance used by the DDP server to\n// implement write fence notifications. Listener callbacks on this crossbar\n// should call beginWrite on the current write fence before they return, if they\n// want to delay the write fence from firing (ie, the DDP method-data-updated\n// message from being sent).\nDDPServer._InvalidationCrossbar = new DDPServer._Crossbar({\n  factName: \"invalidation-crossbar-listeners\"\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server_convenience.js\":function module(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ddp-server/server_convenience.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nif (process.env.DDP_DEFAULT_CONNECTION_URL) {\n  __meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL = process.env.DDP_DEFAULT_CONNECTION_URL;\n}\nMeteor.server = new Server();\nMeteor.refresh = async function (notification) {\n  await DDPServer._InvalidationCrossbar.fire(notification);\n};\n\n// Proxy the public methods of Meteor.server so they can\n// be called directly on Meteor.\n\n['publish', 'isAsyncCall', 'methods', 'call', 'callAsync', 'apply', 'applyAsync', 'onConnection', 'onMessage'].forEach(function (name) {\n  Meteor[name] = Meteor.server[name].bind(Meteor.server);\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"node_modules\":{\"lodash.once\":{\"package.json\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/ddp-server/node_modules/lodash.once/package.json                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = {\n  \"name\": \"lodash.once\",\n  \"version\": \"4.1.1\"\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/ddp-server/node_modules/lodash.once/index.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.useNode();\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"lodash.isempty\":{\"package.json\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/ddp-server/node_modules/lodash.isempty/package.json                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = {\n  \"name\": \"lodash.isempty\",\n  \"version\": \"4.4.0\"\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/ddp-server/node_modules/lodash.isempty/index.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.useNode();\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"lodash.isstring\":{\"package.json\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/ddp-server/node_modules/lodash.isstring/package.json                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = {\n  \"name\": \"lodash.isstring\",\n  \"version\": \"4.0.1\"\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/ddp-server/node_modules/lodash.isstring/index.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.useNode();\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"lodash.isobject\":{\"package.json\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/ddp-server/node_modules/lodash.isobject/package.json                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = {\n  \"name\": \"lodash.isobject\",\n  \"version\": \"3.0.2\"\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/ddp-server/node_modules/lodash.isobject/index.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.useNode();\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\n\n/* Exports */\nreturn {\n  export: function () { return {\n      DDPServer: DDPServer\n    };},\n  require: require,\n  eagerModulePaths: [\n    \"/node_modules/meteor/ddp-server/stream_server.js\",\n    \"/node_modules/meteor/ddp-server/livedata_server.js\",\n    \"/node_modules/meteor/ddp-server/writefence.js\",\n    \"/node_modules/meteor/ddp-server/crossbar.js\",\n    \"/node_modules/meteor/ddp-server/server_convenience.js\"\n  ]\n}});\n","servePath":"/packages/ddp-server.js","sourceMap":{"version":3,"sources":["packages/ddp-server/stream_server.js","packages/ddp-server/livedata_server.js","packages/ddp-server/writefence.js","packages/ddp-server/crossbar.js","packages/ddp-server/server_convenience.js"],"names":["once","module","link","default","v","__reifyWaitForDeps__","websocketExtensions","extensions","websocketCompressionConfig","process","env","SERVER_WEBSOCKET_COMPRESSION","JSON","parse","push","Npm","require","configure","pathPrefix","__meteor_runtime_config__","ROOT_URL_PATH_PREFIX","StreamServer","self","registration_callbacks","open_sockets","prefix","RoutePolicy","declare","sockjs","serverOptions","log","heartbeat_delay","disconnect_delay","disable_cors","DISABLE_SOCKJS_CORS","jsessionid","USE_JSESSIONID","DISABLE_WEBSOCKETS","websocket","faye_server_options","server","createServer","WebApp","httpServer","removeListener","_timeoutAdjustmentRequestCallback","installHandlers","addListener","_redirectWebsocketEndpoint","on","socket","setWebsocketTimeout","timeout","protocol","_session","recv","connection","setTimeout","send","data","write","filter","value","TEST_METADATA","stringify","testMessageOnConnect","forEach","callback","Object","assign","prototype","register","all_sockets","values","event","oldHttpServerListeners","listeners","slice","removeAllListeners","newListener","request","args","arguments","url","parsedUrl","pathname","format","oldListener","apply","__reify_async_result__","_reifyError","async","_objectSpread","isEmpty","isString","isObject","DDPServer","publicationStrategies","SERVER_MERGE","useDummyDocumentView","useCollectionView","doAccountingForCollection","NO_MERGE_NO_HISTORY","NO_MERGE","NO_MERGE_MULTI","DummyDocumentView","existsIn","Set","dataByKey","Map","getFields","clearField","subscriptionHandle","key","changeCollector","undefined","changeField","isAdd","SessionDocumentView","_SessionDocumentView","_getCurrentFence","currentInvocation","_CurrentWriteFence","get","DDP","_CurrentMethodInvocation","fence","ret","precedenceList","removedValue","i","length","precedence","splice","delete","EJSON","equals","clone","has","set","elt","find","SessionCollectionView","collectionName","sessionCallbacks","documents","callbacks","_SessionCollectionView","size","diff","previous","DiffSequence","diffMaps","both","diffDocument","bind","rightOnly","id","nowDV","added","leftOnly","prevDV","removed","fields","diffObjects","prev","now","changed","docView","Meteor","getPublicationStrategy","add","entries","_ref","changedResult","Error","_ref2","err","Session","version","options","Random","initialized","inQueue","_DoubleEndedQueue","blocked","workerRunning","cachedUnblock","_namedSubs","_universalSubs","userId","collectionViews","_isSending","_dontStartNewUniversalSubs","_pendingReady","_closeCallbacks","_socketUrl","_respondToPings","respondToPings","connectionHandle","close","onClose","fn","cb","bindEnvironment","defer","clientAddress","_clientAddress","httpHeaders","headers","msg","session","startUniversalSubs","heartbeatInterval","heartbeat","DDPCommon","Heartbeat","heartbeatTimeout","onTimeout","sendPing","start","Package","Facts","incrementServerFact","sendReady","subscriptionIds","subs","subscriptionId","_canSend","sendAdded","collection","sendChanged","sendRemoved","getSendCallbacks","getCollectionView","view","handlers","universal_publish_handlers","handler","_startSubscription","stop","_meteorSession","_deactivateAllSubscriptions","_removeSession","_printSentDDP","_debug","stringifyDDP","sendError","reason","offendingMessage","processMessage","msg_in","messageReceived","processNext","shift","runHandlers","unblock","onMessageHook","each","protocol_handlers","result","call","_isPromise","finally","sub","name","params","Array","publish_handlers","error","concat","DDPRateLimiter","rateLimiterInput","type","connectionId","_increment","rateLimitResult","_check","allowed","getErrorMessage","timeToReset","unsub","_stopSubscription","method","randomSeed","_WriteFence","onAllCommitted","retire","methods","method_handlers","arm","invocation","MethodInvocation","isSimulation","setUserId","_setUserId","promise","Promise","resolve","reject","withValue","maybeAuditArgumentChecks","finish","payload","then","exception","wrapInternalException","_eachSub","f","_diffCollectionViews","beforeCVs","leftValue","rightValue","doc","_deactivate","oldNamedSubs","all","map","_ref3","newSub","_recreate","_runHandler","_noYieldsAllowed","subId","Subscription","unblockHander","subName","maybeSub","_name","_removeAllDocuments","response","httpForwardedCount","parseInt","remoteAddress","forwardedFor","trim","split","_handler","_subscriptionId","_params","_subscriptionHandle","_deactivated","_stopCallbacks","_documents","_ready","_idFilter","idStringify","MongoID","idParse","resultOrThenable","_CurrentPublicationInvocation","e","_isDeactivated","isThenable","_publishHandlerResult","res","isCursor","c","_publishCursor","ready","isArray","every","collectionNames","_getCollectionName","cur","_callStopCallbacks","collectionDocs","strId","onStop","ids","Server","defaultPublicationStrategy","onConnectionHook","Hook","debugPrintExceptions","_publicationStrategies","sessions","stream_server","raw_msg","_printReceivedDDP","parseDDP","_handleConnect","onConnection","setPublicationStrategy","publicationName","strategy","includes","onMessage","support","SUPPORTED_DDP_VERSIONS","calculateVersion","publish","autopublish","is_auto","warned_about_autopublish","_ref4","isAsyncCall","_isCallAsyncMethodRunning","_ref5","func","_len","_key","pop","callAsync","_args$","_len2","_key2","hasOwnProperty","_setCallAsyncMethodRunning","_CurrentCallAsyncInvocation","_set","hasCallAsyncParent","applyAsync","isFromCallAsync","catch","currentMethodInvocation","currentPublicationInvocation","makeRpcSeed","r","_urlForSession","sessionId","clientSupportedVersions","serverSupportedVersions","correctVersion","_calculateVersion","context","isClientSafe","originalMessage","message","details","_expectedByTest","stack","sanitizedError","description","Match","_failIfArgumentsAreNotAllChecked","constructor","armed","fired","retired","outstanding_writes","before_fire_callbacks","completion_callbacks","beginWrite","committed","_committedFn","_maybeFire","onBeforeFire","_armAndWait","resolver","returnValue","armAndWait","invokeCallback","EnvironmentVariable","_Crossbar","nextId","listenersByCollection","listenersByCollectionCount","factPackage","factName","_collectionForMessage","listen","trigger","record","fire","notification","listenersForCollection","callbackIds","l","_matches","ObjectID","keys","_InvalidationCrossbar","DDP_DEFAULT_CONNECTION_URL","refresh"],"mappings":"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","file":"/packages/ddp-server.js","sourcesContent":["import once from 'lodash.once';\n\n// By default, we use the permessage-deflate extension with default\n// configuration. If $SERVER_WEBSOCKET_COMPRESSION is set, then it must be valid\n// JSON. If it represents a falsey value, then we do not use permessage-deflate\n// at all; otherwise, the JSON value is used as an argument to deflate's\n// configure method; see\n// https://github.com/faye/permessage-deflate-node/blob/master/README.md\n//\n// (We do this in an _.once instead of at startup, because we don't want to\n// crash the tool during isopacket load if your JSON doesn't parse. This is only\n// a problem because the tool has to load the DDP server code just in order to\n// be a DDP client; see https://github.com/meteor/meteor/issues/3452 .)\nvar websocketExtensions = once(function () {\n  var extensions = [];\n\n  var websocketCompressionConfig = process.env.SERVER_WEBSOCKET_COMPRESSION\n        ? JSON.parse(process.env.SERVER_WEBSOCKET_COMPRESSION) : {};\n  if (websocketCompressionConfig) {\n    extensions.push(Npm.require('permessage-deflate').configure(\n      websocketCompressionConfig\n    ));\n  }\n\n  return extensions;\n});\n\nvar pathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX ||  \"\";\n\nStreamServer = function () {\n  var self = this;\n  self.registration_callbacks = [];\n  self.open_sockets = [];\n\n  // Because we are installing directly onto WebApp.httpServer instead of using\n  // WebApp.app, we have to process the path prefix ourselves.\n  self.prefix = pathPrefix + '/sockjs';\n  RoutePolicy.declare(self.prefix + '/', 'network');\n\n  // set up sockjs\n  var sockjs = Npm.require('sockjs');\n  var serverOptions = {\n    prefix: self.prefix,\n    log: function() {},\n    // this is the default, but we code it explicitly because we depend\n    // on it in stream_client:HEARTBEAT_TIMEOUT\n    heartbeat_delay: 45000,\n    // The default disconnect_delay is 5 seconds, but if the server ends up CPU\n    // bound for that much time, SockJS might not notice that the user has\n    // reconnected because the timer (of disconnect_delay ms) can fire before\n    // SockJS processes the new connection. Eventually we'll fix this by not\n    // combining CPU-heavy processing with SockJS termination (eg a proxy which\n    // converts to Unix sockets) but for now, raise the delay.\n    disconnect_delay: 60 * 1000,\n    // Allow disabling of CORS requests to address\n    // https://github.com/meteor/meteor/issues/8317.\n    disable_cors: !!process.env.DISABLE_SOCKJS_CORS,\n    // Set the USE_JSESSIONID environment variable to enable setting the\n    // JSESSIONID cookie. This is useful for setting up proxies with\n    // session affinity.\n    jsessionid: !!process.env.USE_JSESSIONID\n  };\n\n  // If you know your server environment (eg, proxies) will prevent websockets\n  // from ever working, set $DISABLE_WEBSOCKETS and SockJS clients (ie,\n  // browsers) will not waste time attempting to use them.\n  // (Your server will still have a /websocket endpoint.)\n  if (process.env.DISABLE_WEBSOCKETS) {\n    serverOptions.websocket = false;\n  } else {\n    serverOptions.faye_server_options = {\n      extensions: websocketExtensions()\n    };\n  }\n\n  self.server = sockjs.createServer(serverOptions);\n\n  // Install the sockjs handlers, but we want to keep around our own particular\n  // request handler that adjusts idle timeouts while we have an outstanding\n  // request.  This compensates for the fact that sockjs removes all listeners\n  // for \"request\" to add its own.\n  WebApp.httpServer.removeListener(\n    'request', WebApp._timeoutAdjustmentRequestCallback);\n  self.server.installHandlers(WebApp.httpServer);\n  WebApp.httpServer.addListener(\n    'request', WebApp._timeoutAdjustmentRequestCallback);\n\n  // Support the /websocket endpoint\n  self._redirectWebsocketEndpoint();\n\n  self.server.on('connection', function (socket) {\n    // sockjs sometimes passes us null instead of a socket object\n    // so we need to guard against that. see:\n    // https://github.com/sockjs/sockjs-node/issues/121\n    // https://github.com/meteor/meteor/issues/10468\n    if (!socket) return;\n\n    // We want to make sure that if a client connects to us and does the initial\n    // Websocket handshake but never gets to the DDP handshake, that we\n    // eventually kill the socket.  Once the DDP handshake happens, DDP\n    // heartbeating will work. And before the Websocket handshake, the timeouts\n    // we set at the server level in webapp_server.js will work. But\n    // faye-websocket calls setTimeout(0) on any socket it takes over, so there\n    // is an \"in between\" state where this doesn't happen.  We work around this\n    // by explicitly setting the socket timeout to a relatively large time here,\n    // and setting it back to zero when we set up the heartbeat in\n    // livedata_server.js.\n    socket.setWebsocketTimeout = function (timeout) {\n      if ((socket.protocol === 'websocket' ||\n           socket.protocol === 'websocket-raw')\n          && socket._session.recv) {\n        socket._session.recv.connection.setTimeout(timeout);\n      }\n    };\n    socket.setWebsocketTimeout(45 * 1000);\n\n    socket.send = function (data) {\n      socket.write(data);\n    };\n    socket.on('close', function () {\n      self.open_sockets = self.open_sockets.filter(function(value) {\n        return value !== socket;\n      });\n    });\n    self.open_sockets.push(socket);\n\n    // only to send a message after connection on tests, useful for\n    // socket-stream-client/server-tests.js\n    if (process.env.TEST_METADATA && process.env.TEST_METADATA !== \"{}\") {\n      socket.send(JSON.stringify({ testMessageOnConnect: true }));\n    }\n\n    // call all our callbacks when we get a new socket. they will do the\n    // work of setting up handlers and such for specific messages.\n    self.registration_callbacks.forEach(function (callback) {\n      callback(socket);\n    });\n  });\n\n};\n\nObject.assign(StreamServer.prototype, {\n  // call my callback when a new socket connects.\n  // also call it for all current connections.\n  register: function (callback) {\n    var self = this;\n    self.registration_callbacks.push(callback);\n    self.all_sockets().forEach(function (socket) {\n      callback(socket);\n    });\n  },\n\n  // get a list of all sockets\n  all_sockets: function () {\n    var self = this;\n    return Object.values(self.open_sockets);\n  },\n\n  // Redirect /websocket to /sockjs/websocket in order to not expose\n  // sockjs to clients that want to use raw websockets\n  _redirectWebsocketEndpoint: function() {\n    var self = this;\n    // Unfortunately we can't use a connect middleware here since\n    // sockjs installs itself prior to all existing listeners\n    // (meaning prior to any connect middlewares) so we need to take\n    // an approach similar to overshadowListeners in\n    // https://github.com/sockjs/sockjs-node/blob/cf820c55af6a9953e16558555a31decea554f70e/src/utils.coffee\n    ['request', 'upgrade'].forEach((event) => {\n      var httpServer = WebApp.httpServer;\n      var oldHttpServerListeners = httpServer.listeners(event).slice(0);\n      httpServer.removeAllListeners(event);\n\n      // request and upgrade have different arguments passed but\n      // we only care about the first one which is always request\n      var newListener = function(request /*, moreArguments */) {\n        // Store arguments for use within the closure below\n        var args = arguments;\n\n        // TODO replace with url package\n        var url = Npm.require('url');\n\n        // Rewrite /websocket and /websocket/ urls to /sockjs/websocket while\n        // preserving query string.\n        var parsedUrl = url.parse(request.url);\n        if (parsedUrl.pathname === pathPrefix + '/websocket' ||\n            parsedUrl.pathname === pathPrefix + '/websocket/') {\n          parsedUrl.pathname = self.prefix + '/websocket';\n          request.url = url.format(parsedUrl);\n        }\n        oldHttpServerListeners.forEach(function(oldListener) {\n          oldListener.apply(httpServer, args);\n        });\n      };\n      httpServer.addListener(event, newListener);\n    });\n  }\n});","import isEmpty from 'lodash.isempty';\nimport isString from 'lodash.isstring';\nimport isObject from 'lodash.isobject';\n\nDDPServer = {};\n\n\n// Publication strategies define how we handle data from published cursors at the collection level\n// This allows someone to:\n// - Choose a trade-off between client-server bandwidth and server memory usage\n// - Implement special (non-mongo) collections like volatile message queues\nconst publicationStrategies = {\n  // SERVER_MERGE is the default strategy.\n  // When using this strategy, the server maintains a copy of all data a connection is subscribed to.\n  // This allows us to only send deltas over multiple publications.\n  SERVER_MERGE: {\n    useDummyDocumentView: false,\n    useCollectionView: true,\n    doAccountingForCollection: true,\n  },\n  // The NO_MERGE_NO_HISTORY strategy results in the server sending all publication data\n  // directly to the client. It does not remember what it has previously sent\n  // to it will not trigger removed messages when a subscription is stopped.\n  // This should only be chosen for special use cases like send-and-forget queues.\n  NO_MERGE_NO_HISTORY: {\n    useDummyDocumentView: false,\n    useCollectionView: false,\n    doAccountingForCollection: false,\n  },\n  // NO_MERGE is similar to NO_MERGE_NO_HISTORY but the server will remember the IDs it has\n  // sent to the client so it can remove them when a subscription is stopped.\n  // This strategy can be used when a collection is only used in a single publication.\n  NO_MERGE: {\n    useDummyDocumentView: false,\n    useCollectionView: false,\n    doAccountingForCollection: true,\n  },\n  // NO_MERGE_MULTI is similar to `NO_MERGE`, but it does track whether a document is\n  // used by multiple publications. This has some memory overhead, but it still does not do\n  // diffing so it's faster and slimmer than SERVER_MERGE.\n  NO_MERGE_MULTI: {\n    useDummyDocumentView: true,\n    useCollectionView: true,\n    doAccountingForCollection: true\n  }\n};\n\nDDPServer.publicationStrategies = publicationStrategies;\n\n// This file contains classes:\n// * Session - The server's connection to a single DDP client\n// * Subscription - A single subscription for a single client\n// * Server - An entire server that may talk to > 1 client. A DDP endpoint.\n//\n// Session and Subscription are file scope. For now, until we freeze\n// the interface, Server is package scope (in the future it should be\n// exported).\nvar DummyDocumentView = function () {\n  var self = this;\n  self.existsIn = new Set(); // set of subscriptionHandle\n  self.dataByKey = new Map(); // key-> [ {subscriptionHandle, value} by precedence]\n};\n\nObject.assign(DummyDocumentView.prototype, {\n  getFields: function () {\n    return {}\n  },\n\n  clearField: function (subscriptionHandle, key, changeCollector) {\n    changeCollector[key] = undefined\n  },\n\n  changeField: function (subscriptionHandle, key, value,\n                         changeCollector, isAdd) {\n    changeCollector[key] = value\n  }\n});\n\n// Represents a single document in a SessionCollectionView\nvar SessionDocumentView = function () {\n  var self = this;\n  self.existsIn = new Set(); // set of subscriptionHandle\n  self.dataByKey = new Map(); // key-> [ {subscriptionHandle, value} by precedence]\n};\n\nDDPServer._SessionDocumentView = SessionDocumentView;\n\nDDPServer._getCurrentFence = function () {\n  let currentInvocation = this._CurrentWriteFence.get();\n  if (currentInvocation) {\n    return currentInvocation;\n  }\n  currentInvocation = DDP._CurrentMethodInvocation.get();\n  return currentInvocation ? currentInvocation.fence : undefined;\n};\n\nObject.assign(SessionDocumentView.prototype, {\n\n  getFields: function () {\n    var self = this;\n    var ret = {};\n    self.dataByKey.forEach(function (precedenceList, key) {\n      ret[key] = precedenceList[0].value;\n    });\n    return ret;\n  },\n\n  clearField: function (subscriptionHandle, key, changeCollector) {\n    var self = this;\n    // Publish API ignores _id if present in fields\n    if (key === \"_id\")\n      return;\n    var precedenceList = self.dataByKey.get(key);\n\n    // It's okay to clear fields that didn't exist. No need to throw\n    // an error.\n    if (!precedenceList)\n      return;\n\n    var removedValue = undefined;\n    for (var i = 0; i < precedenceList.length; i++) {\n      var precedence = precedenceList[i];\n      if (precedence.subscriptionHandle === subscriptionHandle) {\n        // The view's value can only change if this subscription is the one that\n        // used to have precedence.\n        if (i === 0)\n          removedValue = precedence.value;\n        precedenceList.splice(i, 1);\n        break;\n      }\n    }\n    if (precedenceList.length === 0) {\n      self.dataByKey.delete(key);\n      changeCollector[key] = undefined;\n    } else if (removedValue !== undefined &&\n               !EJSON.equals(removedValue, precedenceList[0].value)) {\n      changeCollector[key] = precedenceList[0].value;\n    }\n  },\n\n  changeField: function (subscriptionHandle, key, value,\n                         changeCollector, isAdd) {\n    var self = this;\n    // Publish API ignores _id if present in fields\n    if (key === \"_id\")\n      return;\n\n    // Don't share state with the data passed in by the user.\n    value = EJSON.clone(value);\n\n    if (!self.dataByKey.has(key)) {\n      self.dataByKey.set(key, [{subscriptionHandle: subscriptionHandle,\n                                value: value}]);\n      changeCollector[key] = value;\n      return;\n    }\n    var precedenceList = self.dataByKey.get(key);\n    var elt;\n    if (!isAdd) {\n      elt = precedenceList.find(function (precedence) {\n          return precedence.subscriptionHandle === subscriptionHandle;\n      });\n    }\n\n    if (elt) {\n      if (elt === precedenceList[0] && !EJSON.equals(value, elt.value)) {\n        // this subscription is changing the value of this field.\n        changeCollector[key] = value;\n      }\n      elt.value = value;\n    } else {\n      // this subscription is newly caring about this field\n      precedenceList.push({subscriptionHandle: subscriptionHandle, value: value});\n    }\n\n  }\n});\n\n/**\n * Represents a client's view of a single collection\n * @param {String} collectionName Name of the collection it represents\n * @param {Object.<String, Function>} sessionCallbacks The callbacks for added, changed, removed\n * @class SessionCollectionView\n */\nvar SessionCollectionView = function (collectionName, sessionCallbacks) {\n  var self = this;\n  self.collectionName = collectionName;\n  self.documents = new Map();\n  self.callbacks = sessionCallbacks;\n};\n\nDDPServer._SessionCollectionView = SessionCollectionView;\n\n\nObject.assign(SessionCollectionView.prototype, {\n\n  isEmpty: function () {\n    var self = this;\n    return self.documents.size === 0;\n  },\n\n  diff: function (previous) {\n    var self = this;\n    DiffSequence.diffMaps(previous.documents, self.documents, {\n      both: self.diffDocument.bind(self),\n\n      rightOnly: function (id, nowDV) {\n        self.callbacks.added(self.collectionName, id, nowDV.getFields());\n      },\n\n      leftOnly: function (id, prevDV) {\n        self.callbacks.removed(self.collectionName, id);\n      }\n    });\n  },\n\n  diffDocument: function (id, prevDV, nowDV) {\n    var self = this;\n    var fields = {};\n    DiffSequence.diffObjects(prevDV.getFields(), nowDV.getFields(), {\n      both: function (key, prev, now) {\n        if (!EJSON.equals(prev, now))\n          fields[key] = now;\n      },\n      rightOnly: function (key, now) {\n        fields[key] = now;\n      },\n      leftOnly: function(key, prev) {\n        fields[key] = undefined;\n      }\n    });\n    self.callbacks.changed(self.collectionName, id, fields);\n  },\n\n  added: function (subscriptionHandle, id, fields) {\n    var self = this;\n    var docView = self.documents.get(id);\n    var added = false;\n    if (!docView) {\n      added = true;\n      if (Meteor.server.getPublicationStrategy(this.collectionName).useDummyDocumentView) {\n        docView = new DummyDocumentView();\n      } else {\n        docView = new SessionDocumentView();\n      }\n\n      self.documents.set(id, docView);\n    }\n    docView.existsIn.add(subscriptionHandle);\n    var changeCollector = {};\n    Object.entries(fields).forEach(function ([key, value]) {\n      docView.changeField(\n        subscriptionHandle, key, value, changeCollector, true);\n    });\n    if (added)\n      self.callbacks.added(self.collectionName, id, changeCollector);\n    else\n      self.callbacks.changed(self.collectionName, id, changeCollector);\n  },\n\n  changed: function (subscriptionHandle, id, changed) {\n    var self = this;\n    var changedResult = {};\n    var docView = self.documents.get(id);\n    if (!docView)\n      throw new Error(\"Could not find element with id \" + id + \" to change\");\n      Object.entries(changed).forEach(function ([key, value]) {\n      if (value === undefined)\n        docView.clearField(subscriptionHandle, key, changedResult);\n      else\n        docView.changeField(subscriptionHandle, key, value, changedResult);\n    });\n    self.callbacks.changed(self.collectionName, id, changedResult);\n  },\n\n  removed: function (subscriptionHandle, id) {\n    var self = this;\n    var docView = self.documents.get(id);\n    if (!docView) {\n      var err = new Error(\"Removed nonexistent document \" + id);\n      throw err;\n    }\n    docView.existsIn.delete(subscriptionHandle);\n    if (docView.existsIn.size === 0) {\n      // it is gone from everyone\n      self.callbacks.removed(self.collectionName, id);\n      self.documents.delete(id);\n    } else {\n      var changed = {};\n      // remove this subscription from every precedence list\n      // and record the changes\n      docView.dataByKey.forEach(function (precedenceList, key) {\n        docView.clearField(subscriptionHandle, key, changed);\n      });\n\n      self.callbacks.changed(self.collectionName, id, changed);\n    }\n  }\n});\n\n/******************************************************************************/\n/* Session                                                                    */\n/******************************************************************************/\n\nvar Session = function (server, version, socket, options) {\n  var self = this;\n  self.id = Random.id();\n\n  self.server = server;\n  self.version = version;\n\n  self.initialized = false;\n  self.socket = socket;\n\n  // Set to null when the session is destroyed. Multiple places below\n  // use this to determine if the session is alive or not.\n  self.inQueue = new Meteor._DoubleEndedQueue();\n\n  self.blocked = false;\n  self.workerRunning = false;\n\n  self.cachedUnblock = null;\n\n  // Sub objects for active subscriptions\n  self._namedSubs = new Map();\n  self._universalSubs = [];\n\n  self.userId = null;\n\n  self.collectionViews = new Map();\n\n  // Set this to false to not send messages when collectionViews are\n  // modified. This is done when rerunning subs in _setUserId and those messages\n  // are calculated via a diff instead.\n  self._isSending = true;\n\n  // If this is true, don't start a newly-created universal publisher on this\n  // session. The session will take care of starting it when appropriate.\n  self._dontStartNewUniversalSubs = false;\n\n  // When we are rerunning subscriptions, any ready messages\n  // we want to buffer up for when we are done rerunning subscriptions\n  self._pendingReady = [];\n\n  // List of callbacks to call when this connection is closed.\n  self._closeCallbacks = [];\n\n\n  // XXX HACK: If a sockjs connection, save off the URL. This is\n  // temporary and will go away in the near future.\n  self._socketUrl = socket.url;\n\n  // Allow tests to disable responding to pings.\n  self._respondToPings = options.respondToPings;\n\n  // This object is the public interface to the session. In the public\n  // API, it is called the `connection` object.  Internally we call it\n  // a `connectionHandle` to avoid ambiguity.\n  self.connectionHandle = {\n    id: self.id,\n    close: function () {\n      self.close();\n    },\n    onClose: function (fn) {\n      var cb = Meteor.bindEnvironment(fn, \"connection onClose callback\");\n      if (self.inQueue) {\n        self._closeCallbacks.push(cb);\n      } else {\n        // if we're already closed, call the callback.\n        Meteor.defer(cb);\n      }\n    },\n    clientAddress: self._clientAddress(),\n    httpHeaders: self.socket.headers\n  };\n\n  self.send({ msg: 'connected', session: self.id });\n\n  // On initial connect, spin up all the universal publishers.\n  self.startUniversalSubs();\n\n  if (version !== 'pre1' && options.heartbeatInterval !== 0) {\n    // We no longer need the low level timeout because we have heartbeats.\n    socket.setWebsocketTimeout(0);\n\n    self.heartbeat = new DDPCommon.Heartbeat({\n      heartbeatInterval: options.heartbeatInterval,\n      heartbeatTimeout: options.heartbeatTimeout,\n      onTimeout: function () {\n        self.close();\n      },\n      sendPing: function () {\n        self.send({msg: 'ping'});\n      }\n    });\n    self.heartbeat.start();\n  }\n\n  Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n    \"livedata\", \"sessions\", 1);\n};\n\nObject.assign(Session.prototype, {\n  sendReady: function (subscriptionIds) {\n    var self = this;\n    if (self._isSending) {\n      self.send({msg: \"ready\", subs: subscriptionIds});\n    } else {\n      subscriptionIds.forEach(function (subscriptionId) {\n        self._pendingReady.push(subscriptionId);\n      });\n    }\n  },\n\n  _canSend(collectionName) {\n    return this._isSending || !this.server.getPublicationStrategy(collectionName).useCollectionView;\n  },\n\n\n  sendAdded(collectionName, id, fields) {\n    if (this._canSend(collectionName)) {\n      this.send({ msg: 'added', collection: collectionName, id, fields });\n    }\n  },\n\n  sendChanged(collectionName, id, fields) {\n    if (isEmpty(fields))\n      return;\n\n    if (this._canSend(collectionName)) {\n      this.send({\n        msg: \"changed\",\n        collection: collectionName,\n        id,\n        fields\n      });\n    }\n  },\n\n  sendRemoved(collectionName, id) {\n    if (this._canSend(collectionName)) {\n      this.send({msg: \"removed\", collection: collectionName, id});\n    }\n  },\n\n  getSendCallbacks: function () {\n    var self = this;\n    return {\n      added: self.sendAdded.bind(self),\n      changed: self.sendChanged.bind(self),\n      removed: self.sendRemoved.bind(self)\n    };\n  },\n\n  getCollectionView: function (collectionName) {\n    var self = this;\n    var ret = self.collectionViews.get(collectionName);\n    if (!ret) {\n      ret = new SessionCollectionView(collectionName,\n                                        self.getSendCallbacks());\n      self.collectionViews.set(collectionName, ret);\n    }\n    return ret;\n  },\n\n  added(subscriptionHandle, collectionName, id, fields) {\n    if (this.server.getPublicationStrategy(collectionName).useCollectionView) {\n      const view = this.getCollectionView(collectionName);\n      view.added(subscriptionHandle, id, fields);\n    } else {\n      this.sendAdded(collectionName, id, fields);\n    }\n  },\n\n  removed(subscriptionHandle, collectionName, id) {\n    if (this.server.getPublicationStrategy(collectionName).useCollectionView) {\n      const view = this.getCollectionView(collectionName);\n      view.removed(subscriptionHandle, id);\n      if (view.isEmpty()) {\n         this.collectionViews.delete(collectionName);\n      }\n    } else {\n      this.sendRemoved(collectionName, id);\n    }\n  },\n\n  changed(subscriptionHandle, collectionName, id, fields) {\n    if (this.server.getPublicationStrategy(collectionName).useCollectionView) {\n      const view = this.getCollectionView(collectionName);\n      view.changed(subscriptionHandle, id, fields);\n    } else {\n      this.sendChanged(collectionName, id, fields);\n    }\n  },\n\n  startUniversalSubs: function () {\n    var self = this;\n    // Make a shallow copy of the set of universal handlers and start them. If\n    // additional universal publishers start while we're running them (due to\n    // yielding), they will run separately as part of Server.publish.\n    var handlers = [...self.server.universal_publish_handlers];\n    handlers.forEach(function (handler) {\n      self._startSubscription(handler);\n    });\n  },\n\n  // Destroy this session and unregister it at the server.\n  close: function () {\n    var self = this;\n\n    // Destroy this session, even if it's not registered at the\n    // server. Stop all processing and tear everything down. If a socket\n    // was attached, close it.\n\n    // Already destroyed.\n    if (! self.inQueue)\n      return;\n\n    // Drop the merge box data immediately.\n    self.inQueue = null;\n    self.collectionViews = new Map();\n\n    if (self.heartbeat) {\n      self.heartbeat.stop();\n      self.heartbeat = null;\n    }\n\n    if (self.socket) {\n      self.socket.close();\n      self.socket._meteorSession = null;\n    }\n\n    Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n      \"livedata\", \"sessions\", -1);\n\n    Meteor.defer(function () {\n      // Stop callbacks can yield, so we defer this on close.\n      // sub._isDeactivated() detects that we set inQueue to null and\n      // treats it as semi-deactivated (it will ignore incoming callbacks, etc).\n      self._deactivateAllSubscriptions();\n\n      // Defer calling the close callbacks, so that the caller closing\n      // the session isn't waiting for all the callbacks to complete.\n      self._closeCallbacks.forEach(function (callback) {\n        callback();\n      });\n    });\n\n    // Unregister the session.\n    self.server._removeSession(self);\n  },\n\n  // Send a message (doing nothing if no socket is connected right now).\n  // It should be a JSON object (it will be stringified).\n  send: function (msg) {\n    const self = this;\n    if (self.socket) {\n      if (Meteor._printSentDDP)\n        Meteor._debug(\"Sent DDP\", DDPCommon.stringifyDDP(msg));\n      self.socket.send(DDPCommon.stringifyDDP(msg));\n    }\n  },\n\n  // Send a connection error.\n  sendError: function (reason, offendingMessage) {\n    var self = this;\n    var msg = {msg: 'error', reason: reason};\n    if (offendingMessage)\n      msg.offendingMessage = offendingMessage;\n    self.send(msg);\n  },\n\n  // Process 'msg' as an incoming message. As a guard against\n  // race conditions during reconnection, ignore the message if\n  // 'socket' is not the currently connected socket.\n  //\n  // We run the messages from the client one at a time, in the order\n  // given by the client. The message handler is passed an idempotent\n  // function 'unblock' which it may call to allow other messages to\n  // begin running in parallel in another fiber (for example, a method\n  // that wants to yield). Otherwise, it is automatically unblocked\n  // when it returns.\n  //\n  // Actually, we don't have to 'totally order' the messages in this\n  // way, but it's the easiest thing that's correct. (unsub needs to\n  // be ordered against sub, methods need to be ordered against each\n  // other).\n  processMessage: function (msg_in) {\n    var self = this;\n    if (!self.inQueue) // we have been destroyed.\n      return;\n\n    // Respond to ping and pong messages immediately without queuing.\n    // If the negotiated DDP version is \"pre1\" which didn't support\n    // pings, preserve the \"pre1\" behavior of responding with a \"bad\n    // request\" for the unknown messages.\n    //\n    // Fibers are needed because heartbeats use Meteor.setTimeout, which\n    // needs a Fiber. We could actually use regular setTimeout and avoid\n    // these new fibers, but it is easier to just make everything use\n    // Meteor.setTimeout and not think too hard.\n    //\n    // Any message counts as receiving a pong, as it demonstrates that\n    // the client is still alive.\n    if (self.heartbeat) {\n      self.heartbeat.messageReceived();\n    };\n\n    if (self.version !== 'pre1' && msg_in.msg === 'ping') {\n      if (self._respondToPings)\n        self.send({msg: \"pong\", id: msg_in.id});\n      return;\n    }\n    if (self.version !== 'pre1' && msg_in.msg === 'pong') {\n      // Since everything is a pong, there is nothing to do\n      return;\n    }\n\n    self.inQueue.push(msg_in);\n    if (self.workerRunning)\n      return;\n    self.workerRunning = true;\n\n    var processNext = function () {\n      var msg = self.inQueue && self.inQueue.shift();\n\n      if (!msg) {\n        self.workerRunning = false;\n        return;\n      }\n\n      function runHandlers() {\n        var blocked = true;\n\n        var unblock = function () {\n          if (!blocked)\n            return; // idempotent\n          blocked = false;\n          processNext();\n        };\n\n        self.server.onMessageHook.each(function (callback) {\n          callback(msg, self);\n          return true;\n        });\n\n        if (msg.msg in self.protocol_handlers) {\n          const result = self.protocol_handlers[msg.msg].call(\n            self,\n            msg,\n            unblock\n          );\n\n          if (Meteor._isPromise(result)) {\n            result.finally(() => unblock());\n          } else {\n            unblock();\n          }\n        } else {\n          self.sendError('Bad request', msg);\n          unblock(); // in case the handler didn't already do it\n        }\n      }\n\n      runHandlers();\n    };\n\n    processNext();\n  },\n\n  protocol_handlers: {\n    sub: async function (msg, unblock) {\n      var self = this;\n\n      // cacheUnblock temporarly, so we can capture it later\n      // we will use unblock in current eventLoop, so this is safe\n      self.cachedUnblock = unblock;\n\n      // reject malformed messages\n      if (typeof (msg.id) !== \"string\" ||\n          typeof (msg.name) !== \"string\" ||\n          ('params' in msg && !(msg.params instanceof Array))) {\n        self.sendError(\"Malformed subscription\", msg);\n        return;\n      }\n\n      if (!self.server.publish_handlers[msg.name]) {\n        self.send({\n          msg: 'nosub', id: msg.id,\n          error: new Meteor.Error(404, `Subscription '${msg.name}' not found`)});\n        return;\n      }\n\n      if (self._namedSubs.has(msg.id))\n        // subs are idempotent, or rather, they are ignored if a sub\n        // with that id already exists. this is important during\n        // reconnect.\n        return;\n\n      // XXX It'd be much better if we had generic hooks where any package can\n      // hook into subscription handling, but in the mean while we special case\n      // ddp-rate-limiter package. This is also done for weak requirements to\n      // add the ddp-rate-limiter package in case we don't have Accounts. A\n      // user trying to use the ddp-rate-limiter must explicitly require it.\n      if (Package['ddp-rate-limiter']) {\n        var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\n        var rateLimiterInput = {\n          userId: self.userId,\n          clientAddress: self.connectionHandle.clientAddress,\n          type: \"subscription\",\n          name: msg.name,\n          connectionId: self.id\n        };\n\n        DDPRateLimiter._increment(rateLimiterInput);\n        var rateLimitResult = DDPRateLimiter._check(rateLimiterInput);\n        if (!rateLimitResult.allowed) {\n          self.send({\n            msg: 'nosub', id: msg.id,\n            error: new Meteor.Error(\n              'too-many-requests',\n              DDPRateLimiter.getErrorMessage(rateLimitResult),\n              {timeToReset: rateLimitResult.timeToReset})\n          });\n          return;\n        }\n      }\n\n      var handler = self.server.publish_handlers[msg.name];\n\n      await self._startSubscription(handler, msg.id, msg.params, msg.name);\n\n      // cleaning cached unblock\n      self.cachedUnblock = null;\n    },\n\n    unsub: function (msg) {\n      var self = this;\n\n      self._stopSubscription(msg.id);\n    },\n\n    method: async function (msg, unblock) {\n      var self = this;\n\n      // Reject malformed messages.\n      // For now, we silently ignore unknown attributes,\n      // for forwards compatibility.\n      if (typeof (msg.id) !== \"string\" ||\n          typeof (msg.method) !== \"string\" ||\n          ('params' in msg && !(msg.params instanceof Array)) ||\n          (('randomSeed' in msg) && (typeof msg.randomSeed !== \"string\"))) {\n        self.sendError(\"Malformed method invocation\", msg);\n        return;\n      }\n\n      var randomSeed = msg.randomSeed || null;\n\n      // Set up to mark the method as satisfied once all observers\n      // (and subscriptions) have reacted to any writes that were\n      // done.\n      var fence = new DDPServer._WriteFence;\n      fence.onAllCommitted(function () {\n        // Retire the fence so that future writes are allowed.\n        // This means that callbacks like timers are free to use\n        // the fence, and if they fire before it's armed (for\n        // example, because the method waits for them) their\n        // writes will be included in the fence.\n        fence.retire();\n        self.send({msg: 'updated', methods: [msg.id]});\n      });\n\n      // Find the handler\n      var handler = self.server.method_handlers[msg.method];\n      if (!handler) {\n        self.send({\n          msg: 'result', id: msg.id,\n          error: new Meteor.Error(404, `Method '${msg.method}' not found`)});\n        await fence.arm();\n        return;\n      }\n\n      var invocation = new DDPCommon.MethodInvocation({\n        name: msg.method,\n        isSimulation: false,\n        userId: self.userId,\n        setUserId(userId) {\n          return self._setUserId(userId);\n        },\n        unblock: unblock,\n        connection: self.connectionHandle,\n        randomSeed: randomSeed,\n        fence,\n      });\n\n      const promise = new Promise((resolve, reject) => {\n        // XXX It'd be better if we could hook into method handlers better but\n        // for now, we need to check if the ddp-rate-limiter exists since we\n        // have a weak requirement for the ddp-rate-limiter package to be added\n        // to our application.\n        if (Package['ddp-rate-limiter']) {\n          var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\n          var rateLimiterInput = {\n            userId: self.userId,\n            clientAddress: self.connectionHandle.clientAddress,\n            type: \"method\",\n            name: msg.method,\n            connectionId: self.id\n          };\n          DDPRateLimiter._increment(rateLimiterInput);\n          var rateLimitResult = DDPRateLimiter._check(rateLimiterInput)\n          if (!rateLimitResult.allowed) {\n            reject(new Meteor.Error(\n              \"too-many-requests\",\n              DDPRateLimiter.getErrorMessage(rateLimitResult),\n              {timeToReset: rateLimitResult.timeToReset}\n            ));\n            return;\n          }\n        }\n\n        resolve(DDPServer._CurrentWriteFence.withValue(\n          fence,\n          () => DDP._CurrentMethodInvocation.withValue(\n            invocation,\n            () => maybeAuditArgumentChecks(\n              handler, invocation, msg.params,\n              \"call to '\" + msg.method + \"'\"\n            )\n          )\n        ));\n      });\n\n      async function finish() {\n        await fence.arm();\n        unblock();\n      }\n\n      const payload = {\n        msg: \"result\",\n        id: msg.id\n      };\n      return promise.then(async result => {\n        await finish();\n        if (result !== undefined) {\n          payload.result = result;\n        }\n        self.send(payload);\n      }, async (exception) => {\n        await finish();\n        payload.error = wrapInternalException(\n          exception,\n          `while invoking method '${msg.method}'`\n        );\n        self.send(payload);\n      });\n    }\n  },\n\n  _eachSub: function (f) {\n    var self = this;\n    self._namedSubs.forEach(f);\n    self._universalSubs.forEach(f);\n  },\n\n  _diffCollectionViews: function (beforeCVs) {\n    var self = this;\n    DiffSequence.diffMaps(beforeCVs, self.collectionViews, {\n      both: function (collectionName, leftValue, rightValue) {\n        rightValue.diff(leftValue);\n      },\n      rightOnly: function (collectionName, rightValue) {\n        rightValue.documents.forEach(function (docView, id) {\n          self.sendAdded(collectionName, id, docView.getFields());\n        });\n      },\n      leftOnly: function (collectionName, leftValue) {\n        leftValue.documents.forEach(function (doc, id) {\n          self.sendRemoved(collectionName, id);\n        });\n      }\n    });\n  },\n\n  // Sets the current user id in all appropriate contexts and reruns\n  // all subscriptions\n  async _setUserId(userId) {\n    var self = this;\n\n    if (userId !== null && typeof userId !== \"string\")\n      throw new Error(\"setUserId must be called on string or null, not \" +\n                      typeof userId);\n\n    // Prevent newly-created universal subscriptions from being added to our\n    // session. They will be found below when we call startUniversalSubs.\n    //\n    // (We don't have to worry about named subscriptions, because we only add\n    // them when we process a 'sub' message. We are currently processing a\n    // 'method' message, and the method did not unblock, because it is illegal\n    // to call setUserId after unblock. Thus we cannot be concurrently adding a\n    // new named subscription).\n    self._dontStartNewUniversalSubs = true;\n\n    // Prevent current subs from updating our collectionViews and call their\n    // stop callbacks. This may yield.\n    self._eachSub(function (sub) {\n      sub._deactivate();\n    });\n\n    // All subs should now be deactivated. Stop sending messages to the client,\n    // save the state of the published collections, reset to an empty view, and\n    // update the userId.\n    self._isSending = false;\n    var beforeCVs = self.collectionViews;\n    self.collectionViews = new Map();\n    self.userId = userId;\n\n    // _setUserId is normally called from a Meteor method with\n    // DDP._CurrentMethodInvocation set. But DDP._CurrentMethodInvocation is not\n    // expected to be set inside a publish function, so we temporary unset it.\n    // Inside a publish function DDP._CurrentPublicationInvocation is set.\n    await DDP._CurrentMethodInvocation.withValue(undefined, async function () {\n      // Save the old named subs, and reset to having no subscriptions.\n      var oldNamedSubs = self._namedSubs;\n      self._namedSubs = new Map();\n      self._universalSubs = [];\n\n\n\n      await Promise.all([...oldNamedSubs].map(async ([subscriptionId, sub]) => {\n        const newSub = sub._recreate();\n        self._namedSubs.set(subscriptionId, newSub);\n        // nb: if the handler throws or calls this.error(), it will in fact\n        // immediately send its 'nosub'. This is OK, though.\n        await newSub._runHandler();\n      }));\n\n      // Allow newly-created universal subs to be started on our connection in\n      // parallel with the ones we're spinning up here, and spin up universal\n      // subs.\n      self._dontStartNewUniversalSubs = false;\n      self.startUniversalSubs();\n    }, { name: '_setUserId' });\n\n    // Start sending messages again, beginning with the diff from the previous\n    // state of the world to the current state. No yields are allowed during\n    // this diff, so that other changes cannot interleave.\n    Meteor._noYieldsAllowed(function () {\n      self._isSending = true;\n      self._diffCollectionViews(beforeCVs);\n      if (!isEmpty(self._pendingReady)) {\n        self.sendReady(self._pendingReady);\n        self._pendingReady = [];\n      }\n    });\n  },\n\n  _startSubscription: function (handler, subId, params, name) {\n    var self = this;\n\n    var sub = new Subscription(\n      self, handler, subId, params, name);\n\n    let unblockHander = self.cachedUnblock;\n    // _startSubscription may call from a lot places\n    // so cachedUnblock might be null in somecases\n    // assign the cachedUnblock\n    sub.unblock = unblockHander || (() => {});\n\n    if (subId)\n      self._namedSubs.set(subId, sub);\n    else\n      self._universalSubs.push(sub);\n\n    return sub._runHandler();\n  },\n\n  // Tear down specified subscription\n  _stopSubscription: function (subId, error) {\n    var self = this;\n\n    var subName = null;\n    if (subId) {\n      var maybeSub = self._namedSubs.get(subId);\n      if (maybeSub) {\n        subName = maybeSub._name;\n        maybeSub._removeAllDocuments();\n        maybeSub._deactivate();\n        self._namedSubs.delete(subId);\n      }\n    }\n\n    var response = {msg: 'nosub', id: subId};\n\n    if (error) {\n      response.error = wrapInternalException(\n        error,\n        subName ? (\"from sub \" + subName + \" id \" + subId)\n          : (\"from sub id \" + subId));\n    }\n\n    self.send(response);\n  },\n\n  // Tear down all subscriptions. Note that this does NOT send removed or nosub\n  // messages, since we assume the client is gone.\n  _deactivateAllSubscriptions: function () {\n    var self = this;\n\n    self._namedSubs.forEach(function (sub, id) {\n      sub._deactivate();\n    });\n    self._namedSubs = new Map();\n\n    self._universalSubs.forEach(function (sub) {\n      sub._deactivate();\n    });\n    self._universalSubs = [];\n  },\n\n  // Determine the remote client's IP address, based on the\n  // HTTP_FORWARDED_COUNT environment variable representing how many\n  // proxies the server is behind.\n  _clientAddress: function () {\n    var self = this;\n\n    // For the reported client address for a connection to be correct,\n    // the developer must set the HTTP_FORWARDED_COUNT environment\n    // variable to an integer representing the number of hops they\n    // expect in the `x-forwarded-for` header. E.g., set to \"1\" if the\n    // server is behind one proxy.\n    //\n    // This could be computed once at startup instead of every time.\n    var httpForwardedCount = parseInt(process.env['HTTP_FORWARDED_COUNT']) || 0;\n\n    if (httpForwardedCount === 0)\n      return self.socket.remoteAddress;\n\n    var forwardedFor = self.socket.headers[\"x-forwarded-for\"];\n    if (!isString(forwardedFor))\n      return null;\n    forwardedFor = forwardedFor.trim().split(/\\s*,\\s*/);\n\n    // Typically the first value in the `x-forwarded-for` header is\n    // the original IP address of the client connecting to the first\n    // proxy.  However, the end user can easily spoof the header, in\n    // which case the first value(s) will be the fake IP address from\n    // the user pretending to be a proxy reporting the original IP\n    // address value.  By counting HTTP_FORWARDED_COUNT back from the\n    // end of the list, we ensure that we get the IP address being\n    // reported by *our* first proxy.\n\n    if (httpForwardedCount < 0 || httpForwardedCount > forwardedFor.length)\n      return null;\n\n    return forwardedFor[forwardedFor.length - httpForwardedCount];\n  }\n});\n\n/******************************************************************************/\n/* Subscription                                                               */\n/******************************************************************************/\n\n// Ctor for a sub handle: the input to each publish function\n\n// Instance name is this because it's usually referred to as this inside a\n// publish\n/**\n * @summary The server's side of a subscription\n * @class Subscription\n * @instanceName this\n * @showInstanceName true\n */\nvar Subscription = function (\n    session, handler, subscriptionId, params, name) {\n  var self = this;\n  self._session = session; // type is Session\n\n  /**\n   * @summary Access inside the publish function. The incoming [connection](#meteor_onconnection) for this subscription.\n   * @locus Server\n   * @name  connection\n   * @memberOf Subscription\n   * @instance\n   */\n  self.connection = session.connectionHandle; // public API object\n\n  self._handler = handler;\n\n  // My subscription ID (generated by client, undefined for universal subs).\n  self._subscriptionId = subscriptionId;\n  // Undefined for universal subs\n  self._name = name;\n\n  self._params = params || [];\n\n  // Only named subscriptions have IDs, but we need some sort of string\n  // internally to keep track of all subscriptions inside\n  // SessionDocumentViews. We use this subscriptionHandle for that.\n  if (self._subscriptionId) {\n    self._subscriptionHandle = 'N' + self._subscriptionId;\n  } else {\n    self._subscriptionHandle = 'U' + Random.id();\n  }\n\n  // Has _deactivate been called?\n  self._deactivated = false;\n\n  // Stop callbacks to g/c this sub.  called w/ zero arguments.\n  self._stopCallbacks = [];\n\n  // The set of (collection, documentid) that this subscription has\n  // an opinion about.\n  self._documents = new Map();\n\n  // Remember if we are ready.\n  self._ready = false;\n\n  // Part of the public API: the user of this sub.\n\n  /**\n   * @summary Access inside the publish function. The id of the logged-in user, or `null` if no user is logged in.\n   * @locus Server\n   * @memberOf Subscription\n   * @name  userId\n   * @instance\n   */\n  self.userId = session.userId;\n\n  // For now, the id filter is going to default to\n  // the to/from DDP methods on MongoID, to\n  // specifically deal with mongo/minimongo ObjectIds.\n\n  // Later, you will be able to make this be \"raw\"\n  // if you want to publish a collection that you know\n  // just has strings for keys and no funny business, to\n  // a DDP consumer that isn't minimongo.\n\n  self._idFilter = {\n    idStringify: MongoID.idStringify,\n    idParse: MongoID.idParse\n  };\n\n  Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n    \"livedata\", \"subscriptions\", 1);\n};\n\nObject.assign(Subscription.prototype, {\n  _runHandler: async function() {\n    // XXX should we unblock() here? Either before running the publish\n    // function, or before running _publishCursor.\n    //\n    // Right now, each publish function blocks all future publishes and\n    // methods waiting on data from Mongo (or whatever else the function\n    // blocks on). This probably slows page load in common cases.\n\n    if (!this.unblock) {\n      this.unblock = () => {};\n    }\n\n    const self = this;\n    let resultOrThenable = null;\n    try {\n      resultOrThenable = DDP._CurrentPublicationInvocation.withValue(\n        self,\n        () =>\n          maybeAuditArgumentChecks(\n            self._handler,\n            self,\n            EJSON.clone(self._params),\n            // It's OK that this would look weird for universal subscriptions,\n            // because they have no arguments so there can never be an\n            // audit-argument-checks failure.\n            \"publisher '\" + self._name + \"'\"\n          ),\n        { name: self._name }\n      );\n    } catch (e) {\n      self.error(e);\n      return;\n    }\n\n    // Did the handler call this.error or this.stop?\n    if (self._isDeactivated()) return;\n\n    // Both conventional and async publish handler functions are supported.\n    // If an object is returned with a then() function, it is either a promise\n    // or thenable and will be resolved asynchronously.\n    const isThenable =\n      resultOrThenable && typeof resultOrThenable.then === 'function';\n    if (isThenable) {\n      try {\n        await self._publishHandlerResult(await resultOrThenable);\n      } catch(e) {\n        self.error(e)\n      }\n    } else {\n      await self._publishHandlerResult(resultOrThenable);\n    }\n  },\n\n  async _publishHandlerResult (res) {\n    // SPECIAL CASE: Instead of writing their own callbacks that invoke\n    // this.added/changed/ready/etc, the user can just return a collection\n    // cursor or array of cursors from the publish function; we call their\n    // _publishCursor method which starts observing the cursor and publishes the\n    // results. Note that _publishCursor does NOT call ready().\n    //\n    // XXX This uses an undocumented interface which only the Mongo cursor\n    // interface publishes. Should we make this interface public and encourage\n    // users to implement it themselves? Arguably, it's unnecessary; users can\n    // already write their own functions like\n    //   var publishMyReactiveThingy = function (name, handler) {\n    //     Meteor.publish(name, function () {\n    //       var reactiveThingy = handler();\n    //       reactiveThingy.publishMe();\n    //     });\n    //   };\n\n    var self = this;\n    var isCursor = function (c) {\n      return c && c._publishCursor;\n    };\n    if (isCursor(res)) {\n      try {\n        await res._publishCursor(self);\n      } catch (e) {\n        self.error(e);\n        return;\n      }\n      // _publishCursor only returns after the initial added callbacks have run.\n      // mark subscription as ready.\n      self.ready();\n    } else if (Array.isArray(res)) {\n      // Check all the elements are cursors\n      if (! res.every(isCursor)) {\n        self.error(new Error(\"Publish function returned an array of non-Cursors\"));\n        return;\n      }\n      // Find duplicate collection names\n      // XXX we should support overlapping cursors, but that would require the\n      // merge box to allow overlap within a subscription\n      var collectionNames = {};\n\n      for (var i = 0; i < res.length; ++i) {\n        var collectionName = res[i]._getCollectionName();\n        if (collectionNames[collectionName]) {\n          self.error(new Error(\n            \"Publish function returned multiple cursors for collection \" +\n              collectionName));\n          return;\n        }\n        collectionNames[collectionName] = true;\n      }\n\n      try {\n        await Promise.all(res.map(cur => cur._publishCursor(self)));\n      } catch (e) {\n        self.error(e);\n        return;\n      }\n      self.ready();\n    } else if (res) {\n      // Truthy values other than cursors or arrays are probably a\n      // user mistake (possible returning a Mongo document via, say,\n      // `coll.findOne()`).\n      self.error(new Error(\"Publish function can only return a Cursor or \"\n                           + \"an array of Cursors\"));\n    }\n  },\n\n  // This calls all stop callbacks and prevents the handler from updating any\n  // SessionCollectionViews further. It's used when the user unsubscribes or\n  // disconnects, as well as during setUserId re-runs. It does *NOT* send\n  // removed messages for the published objects; if that is necessary, call\n  // _removeAllDocuments first.\n  _deactivate: function() {\n    var self = this;\n    if (self._deactivated)\n      return;\n    self._deactivated = true;\n    self._callStopCallbacks();\n    Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n      \"livedata\", \"subscriptions\", -1);\n  },\n\n  _callStopCallbacks: function () {\n    var self = this;\n    // Tell listeners, so they can clean up\n    var callbacks = self._stopCallbacks;\n    self._stopCallbacks = [];\n    callbacks.forEach(function (callback) {\n      callback();\n    });\n  },\n\n  // Send remove messages for every document.\n  _removeAllDocuments: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._documents.forEach(function (collectionDocs, collectionName) {\n        collectionDocs.forEach(function (strId) {\n          self.removed(collectionName, self._idFilter.idParse(strId));\n        });\n      });\n    });\n  },\n\n  // Returns a new Subscription for the same session with the same\n  // initial creation parameters. This isn't a clone: it doesn't have\n  // the same _documents cache, stopped state or callbacks; may have a\n  // different _subscriptionHandle, and gets its userId from the\n  // session, not from this object.\n  _recreate: function () {\n    var self = this;\n    return new Subscription(\n      self._session, self._handler, self._subscriptionId, self._params,\n      self._name);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Stops this client's subscription, triggering a call on the client to the `onStop` callback passed to [`Meteor.subscribe`](#meteor_subscribe), if any. If `error` is not a [`Meteor.Error`](#meteor_error), it will be [sanitized](#meteor_error).\n   * @locus Server\n   * @param {Error} error The error to pass to the client.\n   * @instance\n   * @memberOf Subscription\n   */\n  error: function (error) {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    self._session._stopSubscription(self._subscriptionId, error);\n  },\n\n  // Note that while our DDP client will notice that you've called stop() on the\n  // server (and clean up its _subscriptions table) we don't actually provide a\n  // mechanism for an app to notice this (the subscribe onError callback only\n  // triggers if there is an error).\n\n  /**\n   * @summary Call inside the publish function.  Stops this client's subscription and invokes the client's `onStop` callback with no error.\n   * @locus Server\n   * @instance\n   * @memberOf Subscription\n   */\n  stop: function () {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    self._session._stopSubscription(self._subscriptionId);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Registers a callback function to run when the subscription is stopped.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {Function} func The callback function\n   */\n  onStop: function (callback) {\n    var self = this;\n    callback = Meteor.bindEnvironment(callback, 'onStop callback', self);\n    if (self._isDeactivated())\n      callback();\n    else\n      self._stopCallbacks.push(callback);\n  },\n\n  // This returns true if the sub has been deactivated, *OR* if the session was\n  // destroyed but the deferred call to _deactivateAllSubscriptions hasn't\n  // happened yet.\n  _isDeactivated: function () {\n    var self = this;\n    return self._deactivated || self._session.inQueue === null;\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document has been added to the record set.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that contains the new document.\n   * @param {String} id The new document's ID.\n   * @param {Object} fields The fields in the new document.  If `_id` is present it is ignored.\n   */\n  added (collectionName, id, fields) {\n    if (this._isDeactivated())\n      return;\n    id = this._idFilter.idStringify(id);\n\n    if (this._session.server.getPublicationStrategy(collectionName).doAccountingForCollection) {\n      let ids = this._documents.get(collectionName);\n      if (ids == null) {\n        ids = new Set();\n        this._documents.set(collectionName, ids);\n      }\n      ids.add(id);\n    }\n\n    this._session.added(this._subscriptionHandle, collectionName, id, fields);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document in the record set has been modified.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that contains the changed document.\n   * @param {String} id The changed document's ID.\n   * @param {Object} fields The fields in the document that have changed, together with their new values.  If a field is not present in `fields` it was left unchanged; if it is present in `fields` and has a value of `undefined` it was removed from the document.  If `_id` is present it is ignored.\n   */\n  changed (collectionName, id, fields) {\n    if (this._isDeactivated())\n      return;\n    id = this._idFilter.idStringify(id);\n    this._session.changed(this._subscriptionHandle, collectionName, id, fields);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document has been removed from the record set.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that the document has been removed from.\n   * @param {String} id The ID of the document that has been removed.\n   */\n  removed (collectionName, id) {\n    if (this._isDeactivated())\n      return;\n    id = this._idFilter.idStringify(id);\n\n    if (this._session.server.getPublicationStrategy(collectionName).doAccountingForCollection) {\n      // We don't bother to delete sets of things in a collection if the\n      // collection is empty.  It could break _removeAllDocuments.\n      this._documents.get(collectionName).delete(id);\n    }\n\n    this._session.removed(this._subscriptionHandle, collectionName, id);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that an initial, complete snapshot of the record set has been sent.  This will trigger a call on the client to the `onReady` callback passed to  [`Meteor.subscribe`](#meteor_subscribe), if any.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   */\n  ready: function () {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    if (!self._subscriptionId)\n      return;  // Unnecessary but ignored for universal sub\n    if (!self._ready) {\n      self._session.sendReady([self._subscriptionId]);\n      self._ready = true;\n    }\n  }\n});\n\n/******************************************************************************/\n/* Server                                                                     */\n/******************************************************************************/\n\nServer = function (options = {}) {\n  var self = this;\n\n  // The default heartbeat interval is 30 seconds on the server and 35\n  // seconds on the client.  Since the client doesn't need to send a\n  // ping as long as it is receiving pings, this means that pings\n  // normally go from the server to the client.\n  //\n  // Note: Troposphere depends on the ability to mutate\n  // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.\n  self.options = {\n    heartbeatInterval: 15000,\n    heartbeatTimeout: 15000,\n    // For testing, allow responding to pings to be disabled.\n    respondToPings: true,\n    defaultPublicationStrategy: publicationStrategies.SERVER_MERGE,\n    ...options,\n  };\n\n  // Map of callbacks to call when a new connection comes in to the\n  // server and completes DDP version negotiation. Use an object instead\n  // of an array so we can safely remove one from the list while\n  // iterating over it.\n  self.onConnectionHook = new Hook({\n    debugPrintExceptions: \"onConnection callback\"\n  });\n\n  // Map of callbacks to call when a new message comes in.\n  self.onMessageHook = new Hook({\n    debugPrintExceptions: \"onMessage callback\"\n  });\n\n  self.publish_handlers = {};\n  self.universal_publish_handlers = [];\n\n  self.method_handlers = {};\n\n  self._publicationStrategies = {};\n\n  self.sessions = new Map(); // map from id to session\n\n  self.stream_server = new StreamServer();\n\n  self.stream_server.register(function (socket) {\n    // socket implements the SockJSConnection interface\n    socket._meteorSession = null;\n\n    var sendError = function (reason, offendingMessage) {\n      var msg = {msg: 'error', reason: reason};\n      if (offendingMessage)\n        msg.offendingMessage = offendingMessage;\n      socket.send(DDPCommon.stringifyDDP(msg));\n    };\n\n    socket.on('data', function (raw_msg) {\n      if (Meteor._printReceivedDDP) {\n        Meteor._debug(\"Received DDP\", raw_msg);\n      }\n      try {\n        try {\n          var msg = DDPCommon.parseDDP(raw_msg);\n        } catch (err) {\n          sendError('Parse error');\n          return;\n        }\n        if (msg === null || !msg.msg) {\n          sendError('Bad request', msg);\n          return;\n        }\n\n        if (msg.msg === 'connect') {\n          if (socket._meteorSession) {\n            sendError(\"Already connected\", msg);\n            return;\n          }\n\n          self._handleConnect(socket, msg);\n\n          return;\n        }\n\n        if (!socket._meteorSession) {\n          sendError('Must connect first', msg);\n          return;\n        }\n        socket._meteorSession.processMessage(msg);\n      } catch (e) {\n        // XXX print stack nicely\n        Meteor._debug(\"Internal exception while processing message\", msg, e);\n      }\n    });\n\n    socket.on('close', function () {\n      if (socket._meteorSession) {\n        socket._meteorSession.close();\n      }\n    });\n  });\n};\n\nObject.assign(Server.prototype, {\n\n  /**\n   * @summary Register a callback to be called when a new DDP connection is made to the server.\n   * @locus Server\n   * @param {function} callback The function to call when a new DDP connection is established.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  onConnection: function (fn) {\n    var self = this;\n    return self.onConnectionHook.register(fn);\n  },\n\n  /**\n   * @summary Set publication strategy for the given publication. Publications strategies are available from `DDPServer.publicationStrategies`. You call this method from `Meteor.server`, like `Meteor.server.setPublicationStrategy()`\n   * @locus Server\n   * @alias setPublicationStrategy\n   * @param publicationName {String}\n   * @param strategy {{useCollectionView: boolean, doAccountingForCollection: boolean}}\n   * @memberOf Meteor.server\n   * @importFromPackage meteor\n   */\n  setPublicationStrategy(publicationName, strategy) {\n    if (!Object.values(publicationStrategies).includes(strategy)) {\n      throw new Error(`Invalid merge strategy: ${strategy} \n        for collection ${publicationName}`);\n    }\n    this._publicationStrategies[publicationName] = strategy;\n  },\n\n  /**\n   * @summary Gets the publication strategy for the requested publication. You call this method from `Meteor.server`, like `Meteor.server.getPublicationStrategy()`\n   * @locus Server\n   * @alias getPublicationStrategy\n   * @param publicationName {String}\n   * @memberOf Meteor.server\n   * @importFromPackage meteor\n   * @return {{useCollectionView: boolean, doAccountingForCollection: boolean}}\n   */\n  getPublicationStrategy(publicationName) {\n    return this._publicationStrategies[publicationName]\n      || this.options.defaultPublicationStrategy;\n  },\n\n  /**\n   * @summary Register a callback to be called when a new DDP message is received.\n   * @locus Server\n   * @param {function} callback The function to call when a new DDP message is received.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  onMessage: function (fn) {\n    var self = this;\n    return self.onMessageHook.register(fn);\n  },\n\n  _handleConnect: function (socket, msg) {\n    var self = this;\n\n    // The connect message must specify a version and an array of supported\n    // versions, and it must claim to support what it is proposing.\n    if (!(typeof (msg.version) === 'string' &&\n          Array.isArray(msg.support) &&\n          msg.support.every(isString) &&\n          msg.support.includes(msg.version))) {\n      socket.send(DDPCommon.stringifyDDP({msg: 'failed',\n                                version: DDPCommon.SUPPORTED_DDP_VERSIONS[0]}));\n      socket.close();\n      return;\n    }\n\n    // In the future, handle session resumption: something like:\n    //  socket._meteorSession = self.sessions[msg.session]\n    var version = calculateVersion(msg.support, DDPCommon.SUPPORTED_DDP_VERSIONS);\n\n    if (msg.version !== version) {\n      // The best version to use (according to the client's stated preferences)\n      // is not the one the client is trying to use. Inform them about the best\n      // version to use.\n      socket.send(DDPCommon.stringifyDDP({msg: 'failed', version: version}));\n      socket.close();\n      return;\n    }\n\n    // Yay, version matches! Create a new session.\n    // Note: Troposphere depends on the ability to mutate\n    // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.\n    socket._meteorSession = new Session(self, version, socket, self.options);\n    self.sessions.set(socket._meteorSession.id, socket._meteorSession);\n    self.onConnectionHook.each(function (callback) {\n      if (socket._meteorSession)\n        callback(socket._meteorSession.connectionHandle);\n      return true;\n    });\n  },\n  /**\n   * Register a publish handler function.\n   *\n   * @param name {String} identifier for query\n   * @param handler {Function} publish handler\n   * @param options {Object}\n   *\n   * Server will call handler function on each new subscription,\n   * either when receiving DDP sub message for a named subscription, or on\n   * DDP connect for a universal subscription.\n   *\n   * If name is null, this will be a subscription that is\n   * automatically established and permanently on for all connected\n   * client, instead of a subscription that can be turned on and off\n   * with subscribe().\n   *\n   * options to contain:\n   *  - (mostly internal) is_auto: true if generated automatically\n   *    from an autopublish hook. this is for cosmetic purposes only\n   *    (it lets us determine whether to print a warning suggesting\n   *    that you turn off autopublish).\n   */\n\n  /**\n   * @summary Publish a record set.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   * @locus Server\n   * @param {String|Object} name If String, name of the record set.  If Object, publications Dictionary of publish functions by name.  If `null`, the set has no name, and the record set is automatically sent to all connected clients.\n   * @param {Function} func Function called on the server each time a client subscribes.  Inside the function, `this` is the publish handler object, described below.  If the client passed arguments to `subscribe`, the function is called with the same arguments.\n   */\n  publish: function (name, handler, options) {\n    var self = this;\n\n    if (!isObject(name)) {\n      options = options || {};\n\n      if (name && name in self.publish_handlers) {\n        Meteor._debug(\"Ignoring duplicate publish named '\" + name + \"'\");\n        return;\n      }\n\n      if (Package.autopublish && !options.is_auto) {\n        // They have autopublish on, yet they're trying to manually\n        // pick stuff to publish. They probably should turn off\n        // autopublish. (This check isn't perfect -- if you create a\n        // publish before you turn on autopublish, it won't catch\n        // it, but this will definitely handle the simple case where\n        // you've added the autopublish package to your app, and are\n        // calling publish from your app code).\n        if (!self.warned_about_autopublish) {\n          self.warned_about_autopublish = true;\n          Meteor._debug(\n    \"** You've set up some data subscriptions with Meteor.publish(), but\\n\" +\n    \"** you still have autopublish turned on. Because autopublish is still\\n\" +\n    \"** on, your Meteor.publish() calls won't have much effect. All data\\n\" +\n    \"** will still be sent to all clients.\\n\" +\n    \"**\\n\" +\n    \"** Turn off autopublish by removing the autopublish package:\\n\" +\n    \"**\\n\" +\n    \"**   $ meteor remove autopublish\\n\" +\n    \"**\\n\" +\n    \"** .. and make sure you have Meteor.publish() and Meteor.subscribe() calls\\n\" +\n    \"** for each collection that you want clients to see.\\n\");\n        }\n      }\n\n      if (name)\n        self.publish_handlers[name] = handler;\n      else {\n        self.universal_publish_handlers.push(handler);\n        // Spin up the new publisher on any existing session too. Run each\n        // session's subscription in a new Fiber, so that there's no change for\n        // self.sessions to change while we're running this loop.\n        self.sessions.forEach(function (session) {\n          if (!session._dontStartNewUniversalSubs) {\n            session._startSubscription(handler);\n          }\n        });\n      }\n    }\n    else{\n      Object.entries(name).forEach(function([key, value]) {\n        self.publish(key, value, {});\n      });\n    }\n  },\n\n  _removeSession: function (session) {\n    var self = this;\n    self.sessions.delete(session.id);\n  },\n\n  /**\n   * @summary Tells if the method call came from a call or a callAsync.\n   * @locus Anywhere\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   * @returns boolean\n   */\n  isAsyncCall: function(){\n    return DDP._CurrentMethodInvocation._isCallAsyncMethodRunning()\n  },\n\n  /**\n   * @summary Defines functions that can be invoked over the network by clients.\n   * @locus Anywhere\n   * @param {Object} methods Dictionary whose keys are method names and values are functions.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  methods: function (methods) {\n    var self = this;\n    Object.entries(methods).forEach(function ([name, func]) {\n      if (typeof func !== 'function')\n        throw new Error(\"Method '\" + name + \"' must be a function\");\n      if (self.method_handlers[name])\n        throw new Error(\"A method named '\" + name + \"' is already defined\");\n      self.method_handlers[name] = func;\n    });\n  },\n\n  call: function (name, ...args) {\n    if (args.length && typeof args[args.length - 1] === \"function\") {\n      // If it's a function, the last argument is the result callback, not\n      // a parameter to the remote method.\n      var callback = args.pop();\n    }\n\n    return this.apply(name, args, callback);\n  },\n\n  // A version of the call method that always returns a Promise.\n  callAsync: function (name, ...args) {\n    const options = args[0]?.hasOwnProperty('returnStubValue')\n      ? args.shift()\n      : {};\n    DDP._CurrentMethodInvocation._setCallAsyncMethodRunning(true);\n    const promise = new Promise((resolve, reject) => {\n      DDP._CurrentCallAsyncInvocation._set({ name, hasCallAsyncParent: true });\n      this.applyAsync(name, args, { isFromCallAsync: true, ...options })\n        .then(resolve)\n        .catch(reject)\n        .finally(() => {\n          DDP._CurrentCallAsyncInvocation._set();\n        });\n    });\n    return promise.finally(() =>\n      DDP._CurrentMethodInvocation._setCallAsyncMethodRunning(false)\n    );\n  },\n\n  apply: function (name, args, options, callback) {\n    // We were passed 3 arguments. They may be either (name, args, options)\n    // or (name, args, callback)\n    if (! callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    } else {\n      options = options || {};\n    }\n    const promise = this.applyAsync(name, args, options);\n\n    // Return the result in whichever way the caller asked for it. Note that we\n    // do NOT block on the write fence in an analogous way to how the client\n    // blocks on the relevant data being visible, so you are NOT guaranteed that\n    // cursor observe callbacks have fired when your callback is invoked. (We\n    // can change this if there's a real use case).\n    if (callback) {\n      promise.then(\n        result => callback(undefined, result),\n        exception => callback(exception)\n      );\n    } else {\n      return promise;\n    }\n  },\n\n  // @param options {Optional Object}\n  applyAsync: function (name, args, options) {\n    // Run the handler\n    var handler = this.method_handlers[name];\n\n    if (! handler) {\n      return Promise.reject(\n        new Meteor.Error(404, `Method '${name}' not found`)\n      );\n    }\n    // If this is a method call from within another method or publish function,\n    // get the user state from the outer method or publish function, otherwise\n    // don't allow setUserId to be called\n    var userId = null;\n    let setUserId = () => {\n      throw new Error(\"Can't call setUserId on a server initiated method call\");\n    };\n    var connection = null;\n    var currentMethodInvocation = DDP._CurrentMethodInvocation.get();\n    var currentPublicationInvocation = DDP._CurrentPublicationInvocation.get();\n    var randomSeed = null;\n\n    if (currentMethodInvocation) {\n      userId = currentMethodInvocation.userId;\n      setUserId = (userId) => currentMethodInvocation.setUserId(userId);\n      connection = currentMethodInvocation.connection;\n      randomSeed = DDPCommon.makeRpcSeed(currentMethodInvocation, name);\n    } else if (currentPublicationInvocation) {\n      userId = currentPublicationInvocation.userId;\n      setUserId = (userId) => currentPublicationInvocation._session._setUserId(userId);\n      connection = currentPublicationInvocation.connection;\n    }\n\n    var invocation = new DDPCommon.MethodInvocation({\n      isSimulation: false,\n      userId,\n      setUserId,\n      connection,\n      randomSeed\n    });\n\n    return new Promise((resolve, reject) => {\n      let result;\n      try {\n        result = DDP._CurrentMethodInvocation.withValue(invocation, () =>\n          maybeAuditArgumentChecks(\n            handler,\n            invocation,\n            EJSON.clone(args),\n            \"internal call to '\" + name + \"'\"\n          )\n        );\n      } catch (e) {\n        return reject(e);\n      }\n      if (!Meteor._isPromise(result)) {\n        return resolve(result);\n      }\n      result.then(r => resolve(r)).catch(reject);\n    }).then(EJSON.clone);\n  },\n\n  _urlForSession: function (sessionId) {\n    var self = this;\n    var session = self.sessions.get(sessionId);\n    if (session)\n      return session._socketUrl;\n    else\n      return null;\n  }\n});\n\nvar calculateVersion = function (clientSupportedVersions,\n                                 serverSupportedVersions) {\n  var correctVersion = clientSupportedVersions.find(function (version) {\n    return serverSupportedVersions.includes(version);\n  });\n  if (!correctVersion) {\n    correctVersion = serverSupportedVersions[0];\n  }\n  return correctVersion;\n};\n\nDDPServer._calculateVersion = calculateVersion;\n\n\n// \"blind\" exceptions other than those that were deliberately thrown to signal\n// errors to the client\nvar wrapInternalException = function (exception, context) {\n  if (!exception) return exception;\n\n  // To allow packages to throw errors intended for the client but not have to\n  // depend on the Meteor.Error class, `isClientSafe` can be set to true on any\n  // error before it is thrown.\n  if (exception.isClientSafe) {\n    if (!(exception instanceof Meteor.Error)) {\n      const originalMessage = exception.message;\n      exception = new Meteor.Error(exception.error, exception.reason, exception.details);\n      exception.message = originalMessage;\n    }\n    return exception;\n  }\n\n  // Tests can set the '_expectedByTest' flag on an exception so it won't go to\n  // the server log.\n  if (!exception._expectedByTest) {\n    Meteor._debug(\"Exception \" + context, exception.stack);\n    if (exception.sanitizedError) {\n      Meteor._debug(\"Sanitized and reported to the client as:\", exception.sanitizedError);\n      Meteor._debug();\n    }\n  }\n\n  // Did the error contain more details that could have been useful if caught in\n  // server code (or if thrown from non-client-originated code), but also\n  // provided a \"sanitized\" version with more context than 500 Internal server error? Use that.\n  if (exception.sanitizedError) {\n    if (exception.sanitizedError.isClientSafe)\n      return exception.sanitizedError;\n    Meteor._debug(\"Exception \" + context + \" provides a sanitizedError that \" +\n                  \"does not have isClientSafe property set; ignoring\");\n  }\n\n  return new Meteor.Error(500, \"Internal server error\");\n};\n\n\n// Audit argument checks, if the audit-argument-checks package exists (it is a\n// weak dependency of this package).\nvar maybeAuditArgumentChecks = function (f, context, args, description) {\n  args = args || [];\n  if (Package['audit-argument-checks']) {\n    return Match._failIfArgumentsAreNotAllChecked(\n      f, context, args, description);\n  }\n  return f.apply(context, args);\n};","// A write fence collects a group of writes, and provides a callback\n// when all of the writes are fully committed and propagated (all\n// observers have been notified of the write and acknowledged it.)\n//\nDDPServer._WriteFence = class {\n  constructor() {\n    this.armed = false;\n    this.fired = false;\n    this.retired = false;\n    this.outstanding_writes = 0;\n    this.before_fire_callbacks = [];\n    this.completion_callbacks = [];\n  }\n\n  // Start tracking a write, and return an object to represent it. The\n  // object has a single method, committed(). This method should be\n  // called when the write is fully committed and propagated. You can\n  // continue to add writes to the WriteFence up until it is triggered\n  // (calls its callbacks because all writes have committed.)\n  beginWrite() {\n    if (this.retired)\n      return { committed: function () {} };\n\n    if (this.fired)\n      throw new Error(\"fence has already activated -- too late to add writes\");\n\n    this.outstanding_writes++;\n    let committed = false;\n    const _committedFn = async () => {\n      if (committed)\n        throw new Error(\"committed called twice on the same write\");\n      committed = true;\n      this.outstanding_writes--;\n      await this._maybeFire();\n    };\n\n    return {\n      committed: _committedFn,\n    };\n  }\n\n  // Arm the fence. Once the fence is armed, and there are no more\n  // uncommitted writes, it will activate.\n  arm() {\n\n    if (this === DDPServer._getCurrentFence())\n      throw Error(\"Can't arm the current fence\");\n    this.armed = true;\n    return this._maybeFire();\n  }\n\n  // Register a function to be called once before firing the fence.\n  // Callback function can add new writes to the fence, in which case\n  // it won't fire until those writes are done as well.\n  onBeforeFire(func) {\n    if (this.fired)\n      throw new Error(\"fence has already activated -- too late to \" +\n          \"add a callback\");\n    this.before_fire_callbacks.push(func);\n  }\n\n  // Register a function to be called when the fence fires.\n  onAllCommitted(func) {\n    if (this.fired)\n      throw new Error(\"fence has already activated -- too late to \" +\n          \"add a callback\");\n    this.completion_callbacks.push(func);\n  }\n\n  async _armAndWait() {\n    let resolver;\n    const returnValue = new Promise(r => resolver = r);\n    this.onAllCommitted(resolver);\n    await this.arm();\n\n    return returnValue;\n  }\n  // Convenience function. Arms the fence, then blocks until it fires.\n  async armAndWait() {\n    return this._armAndWait();\n  }\n\n  async _maybeFire() {\n    if (this.fired)\n      throw new Error(\"write fence already activated?\");\n    if (this.armed && !this.outstanding_writes) {\n      const invokeCallback = async (func) => {\n        try {\n          await func(this);\n        } catch (err) {\n          Meteor._debug(\"exception in write fence callback:\", err);\n        }\n      };\n\n      this.outstanding_writes++;\n      while (this.before_fire_callbacks.length > 0) {\n        const cb = this.before_fire_callbacks.shift();\n        await invokeCallback(cb);\n      }\n      this.outstanding_writes--;\n\n      if (!this.outstanding_writes) {\n        this.fired = true;\n        const callbacks = this.completion_callbacks || [];\n        this.completion_callbacks = [];\n        while (callbacks.length > 0) {\n          const cb = callbacks.shift();\n          await invokeCallback(cb);\n        }\n      }\n    }\n  }\n\n  // Deactivate this fence so that adding more writes has no effect.\n  // The fence must have already fired.\n  retire() {\n    if (!this.fired)\n      throw new Error(\"Can't retire a fence that hasn't fired.\");\n    this.retired = true;\n  }\n};\n\n// The current write fence. When there is a current write fence, code\n// that writes to databases should register their writes with it using\n// beginWrite().\n//\nDDPServer._CurrentWriteFence = new Meteor.EnvironmentVariable;\n","// A \"crossbar\" is a class that provides structured notification registration.\n// See _match for the definition of how a notification matches a trigger.\n// All notifications and triggers must have a string key named 'collection'.\n\nDDPServer._Crossbar = function (options) {\n  var self = this;\n  options = options || {};\n\n  self.nextId = 1;\n  // map from collection name (string) -> listener id -> object. each object has\n  // keys 'trigger', 'callback'.  As a hack, the empty string means \"no\n  // collection\".\n  self.listenersByCollection = {};\n  self.listenersByCollectionCount = {};\n  self.factPackage = options.factPackage || \"livedata\";\n  self.factName = options.factName || null;\n};\n\nObject.assign(DDPServer._Crossbar.prototype, {\n  // msg is a trigger or a notification\n  _collectionForMessage: function (msg) {\n    var self = this;\n    if (!('collection' in msg)) {\n      return '';\n    } else if (typeof(msg.collection) === 'string') {\n      if (msg.collection === '')\n        throw Error(\"Message has empty collection!\");\n      return msg.collection;\n    } else {\n      throw Error(\"Message has non-string collection!\");\n    }\n  },\n\n  // Listen for notification that match 'trigger'. A notification\n  // matches if it has the key-value pairs in trigger as a\n  // subset. When a notification matches, call 'callback', passing\n  // the actual notification.\n  //\n  // Returns a listen handle, which is an object with a method\n  // stop(). Call stop() to stop listening.\n  //\n  // XXX It should be legal to call fire() from inside a listen()\n  // callback?\n  listen: function (trigger, callback) {\n    var self = this;\n    var id = self.nextId++;\n\n    var collection = self._collectionForMessage(trigger);\n    var record = {trigger: EJSON.clone(trigger), callback: callback};\n    if (! (collection in self.listenersByCollection)) {\n      self.listenersByCollection[collection] = {};\n      self.listenersByCollectionCount[collection] = 0;\n    }\n    self.listenersByCollection[collection][id] = record;\n    self.listenersByCollectionCount[collection]++;\n\n    if (self.factName && Package['facts-base']) {\n      Package['facts-base'].Facts.incrementServerFact(\n        self.factPackage, self.factName, 1);\n    }\n\n    return {\n      stop: function () {\n        if (self.factName && Package['facts-base']) {\n          Package['facts-base'].Facts.incrementServerFact(\n            self.factPackage, self.factName, -1);\n        }\n        delete self.listenersByCollection[collection][id];\n        self.listenersByCollectionCount[collection]--;\n        if (self.listenersByCollectionCount[collection] === 0) {\n          delete self.listenersByCollection[collection];\n          delete self.listenersByCollectionCount[collection];\n        }\n      }\n    };\n  },\n\n  // Fire the provided 'notification' (an object whose attribute\n  // values are all JSON-compatibile) -- inform all matching listeners\n  // (registered with listen()).\n  //\n  // If fire() is called inside a write fence, then each of the\n  // listener callbacks will be called inside the write fence as well.\n  //\n  // The listeners may be invoked in parallel, rather than serially.\n  fire: async function (notification) {\n    var self = this;\n\n    var collection = self._collectionForMessage(notification);\n\n    if (!(collection in self.listenersByCollection)) {\n      return;\n    }\n\n    var listenersForCollection = self.listenersByCollection[collection];\n    var callbackIds = [];\n    Object.entries(listenersForCollection).forEach(function ([id, l]) {\n      if (self._matches(notification, l.trigger)) {\n        callbackIds.push(id);\n      }\n    });\n\n    // Listener callbacks can yield, so we need to first find all the ones that\n    // match in a single iteration over self.listenersByCollection (which can't\n    // be mutated during this iteration), and then invoke the matching\n    // callbacks, checking before each call to ensure they haven't stopped.\n    // Note that we don't have to check that\n    // self.listenersByCollection[collection] still === listenersForCollection,\n    // because the only way that stops being true is if listenersForCollection\n    // first gets reduced down to the empty object (and then never gets\n    // increased again).\n    for (const id of callbackIds) {\n      if (id in listenersForCollection) {\n        await listenersForCollection[id].callback(notification);\n      }\n    }\n  },\n\n  // A notification matches a trigger if all keys that exist in both are equal.\n  //\n  // Examples:\n  //  N:{collection: \"C\"} matches T:{collection: \"C\"}\n  //    (a non-targeted write to a collection matches a\n  //     non-targeted query)\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\"}\n  //    (a targeted write to a collection matches a non-targeted query)\n  //  N:{collection: \"C\"} matches T:{collection: \"C\", id: \"X\"}\n  //    (a non-targeted write to a collection matches a\n  //     targeted query)\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\", id: \"X\"}\n  //    (a targeted write to a collection matches a targeted query targeted\n  //     at the same document)\n  //  N:{collection: \"C\", id: \"X\"} does not match T:{collection: \"C\", id: \"Y\"}\n  //    (a targeted write to a collection does not match a targeted query\n  //     targeted at a different document)\n  _matches: function (notification, trigger) {\n    // Most notifications that use the crossbar have a string `collection` and\n    // maybe an `id` that is a string or ObjectID. We're already dividing up\n    // triggers by collection, but let's fast-track \"nope, different ID\" (and\n    // avoid the overly generic EJSON.equals). This makes a noticeable\n    // performance difference; see https://github.com/meteor/meteor/pull/3697\n    if (typeof(notification.id) === 'string' &&\n        typeof(trigger.id) === 'string' &&\n        notification.id !== trigger.id) {\n      return false;\n    }\n    if (notification.id instanceof MongoID.ObjectID &&\n        trigger.id instanceof MongoID.ObjectID &&\n        ! notification.id.equals(trigger.id)) {\n      return false;\n    }\n\n    return Object.keys(trigger).every(function (key) {\n      return !(key in notification) || EJSON.equals(trigger[key], notification[key]);\n     });\n  }\n});\n\n// The \"invalidation crossbar\" is a specific instance used by the DDP server to\n// implement write fence notifications. Listener callbacks on this crossbar\n// should call beginWrite on the current write fence before they return, if they\n// want to delay the write fence from firing (ie, the DDP method-data-updated\n// message from being sent).\nDDPServer._InvalidationCrossbar = new DDPServer._Crossbar({\n  factName: \"invalidation-crossbar-listeners\"\n});","if (process.env.DDP_DEFAULT_CONNECTION_URL) {\n  __meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL =\n    process.env.DDP_DEFAULT_CONNECTION_URL;\n}\n\nMeteor.server = new Server();\n\nMeteor.refresh = async function (notification) {\n  await DDPServer._InvalidationCrossbar.fire(notification);\n};\n\n// Proxy the public methods of Meteor.server so they can\n// be called directly on Meteor.\n\n  [\n    'publish',\n    'isAsyncCall',\n    'methods',\n    'call',\n    'callAsync',\n    'apply',\n    'applyAsync',\n    'onConnection',\n    'onMessage',\n  ].forEach(\n  function(name) {\n    Meteor[name] = Meteor.server[name].bind(Meteor.server);\n  }\n);\n"]}}]